openapi: 3.0.1
info:
  title: Control-M Services
  description: Provides access to BMC Control-M Services
  contact:
    email: customer_support@bmc.com
  license:
    name: BMC License
    url: ./license.html
  version: 9.20.115
servers:
- url: /
security:
- Bearer: []
tags:
- name: deploy
  description: Submit definitions to Control-M.
- name: session
  description: Create and destroy user sessions.
- name: archive
  description: Control-M Archiving operations.
- name: build
  description: Compile definitions to verify they are valid for Control-M.
- name: provision
  description: Install a BigData agent on the current account.
- name: reporting
  description: Generate Control-M reports.
- name: run
  description: Run and track Control-M jobs.
- name: config
  description: Manage Control-M configuration and environment.
paths:
  /deploy:
    post:
      tags:
      - deploy
      summary: Deploy definitions file
      description: "Deploy the provided definition file (JSON, XML or zip) to Control-M"
      operationId: deployFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: File deploy results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentFileResults'
                x-content-type: application/json
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
  /deploy/ai/jobtype:
    post:
      tags:
      - deploy
      summary: Deploy of Application Integrator job type.
      description: Deploy an exsiting Application Integrator job type to agent in
        order to allow it to run
      operationId: deployAiJobtype
      parameters:
      - name: ctm
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: agent
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: jobTypeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Response of AI server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiDeployResponse'
        "400":
          description: Ai server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
      x-min-em-version: 9.0.19.100
  /deploy/ai/jobtypes:
    get:
      tags:
      - deploy
      summary: Get Application Integrator job types
      description: Get deployed Application Integrator job types that match the requested
        search criteria.
      operationId: getDeployedAiJobtypes
      parameters:
      - name: jobTypeName
        in: query
        description: Job type display name ( or partial name ) for query. It accepts
          * as wildcard.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobTypeId
        in: query
        description: Job type id ( or partial name ) for query. It accepts * as wildcard.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of deployed jobtypes (json format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiJobtypeList'
        "400":
          description: Ai server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are jobTypeName and jobTypeId. Wildcard
        * is supported
      x-additional-usage: -s <search query>
      x-min-em-version: 9.0.19.100
  /deploy/connectionprofiles:
    get:
      tags:
      - deploy
      summary: Get local deployed connection profiles
      description: Get currently local deployed connection profiles according to the
        search query as JSON.
      operationId: getDeployedConnectionProfiles
      parameters:
      - name: ctm
        in: query
        description: The name of the Control-M in which the connection profile is
          deployed on
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: The name of the Control-M in which the connection profile is
          deployed on
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: agent
        in: query
        description: The name of the agent the connection profile is deployed on
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: type
        in: query
        description: "The type of connection profile such as Database, FileTransfer,\
          \ Hadoop, Informatica, SAP."
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Getting local deployed connection profiles
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Local connection profiles not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are ctm, server, agent, type"
      x-additional-usage: -s <search query>
      x-search-required: true
  /deploy/connectionprofiles/local:
    get:
      tags:
      - deploy
      summary: Get local deployed connection profiles
      description: Get currently local deployed connection profiles according to the
        search query as JSON.
      operationId: getLocalConnectionProfiles
      parameters:
      - name: ctm
        in: query
        description: The name of the Control-M in which the connection profile is
          deployed on
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: The name of the Control-M in which the connection profile is
          deployed on
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: agent
        in: query
        description: The name of the agent the connection profile is deployed on
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: type
        in: query
        description: "The type of connection profile such as Database, FileTransfer,\
          \ Hadoop, Informatica, SAP."
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Getting local deployed connection profiles
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Local connection profiles not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are ctm, agent, type"
      x-additional-usage: -s <search query>
      x-search-required: true
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /deploy/connectionprofiles/centralized:
    get:
      tags:
      - deploy
      summary: Get centralized deployed connection profile
      description: Get currently centralized deployed connection profiles according
        to the search query as JSON.
      operationId: getSharedConnectionProfiles
      parameters:
      - name: type
        in: query
        description: "The type of connection profile such as Database, FileTransfer,\
          \ Hadoop, Informatica, SAP. Use * to get all types"
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: '*'
          x-hidden: true
        x-hidden: true
      - name: name
        in: query
        description: "The name of centralized connection profile. Supports for *,\
          \ ?, and comma. By default is *"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: '*'
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Getting centralized deployed connection profiles
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: centralized connection profiles not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are type and name
      x-additional-usage: -s <search query>
      x-search-required: true
      x-min-em-version: 9.0.20.000
  /deploy/connectionprofiles/centralized/status:
    get:
      tags:
      - deploy
      summary: Get deployed connection profiles status
      description: Get currently deployed connection profiles status according to
        the search query as JSON.
      operationId: getDeployedConnectionProfilesStatus
      parameters:
      - name: limit
        in: query
        description: number to limit the returned connection profiles. If missed -
          get all
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 0
      - name: name
        in: query
        description: "conn profile name (support *, ?, and comma, default is * for\
          \ all)."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: '*'
          x-hidden: true
        x-hidden: true
      - name: type
        in: query
        description: conn profile type (default is * for accounts from all CMs).
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: '*'
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Getting deployed connection profiles status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfilesStatusResult'
        "206":
          description: "Result with the requested statuses, number of connection profiles\
            \ exceed the limit."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfilesStatusResult'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection profiles status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are name, type, limit"
      x-additional-usage: -s <search query>
      x-search-required: true
      x-min-em-version: 9.0.20.000
  /deploy/connectionprofile/centralized/deploymentstatus/{type}/{name}:
    get:
      tags:
      - deploy
      summary: Get deployed connection profiles deployment status
      description: Get currently deployed connection profiles deployment status according
        to the search query as JSON.
      operationId: getConnectionProfilesDeploymentStatus
      parameters:
      - name: type
        in: path
        description: "The type of connection profile such as Database, FileTransfer,\
          \ Hadoop, Informatica, SAP."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Name of the Connection Profile
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Getting connection profiles deployment status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfilesDeploymentStatusResult'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection profiles deployment status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-action: deploymentstatus
  /deploy/connectionprofile/{server}/{agent}/{type}/{name}:
    delete:
      tags:
      - deploy
      summary: Delete Local Connection Profile
      description: Delete Local Connection Profile.
      operationId: deleteConnectionProfile
      parameters:
      - name: server
        in: path
        description: The name of the Control-M in which the connection profile is
          deployed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The name of the agent the connection profile is deployed on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: path
        description: The type of connection profile to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Name of the Connection Profile
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Connection Profile was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /deploy/connectionprofile/local/{server}/{agent}/{type}/{name}:
    delete:
      tags:
      - deploy
      summary: Delete Local Connection Profile
      description: Delete Local Connection Profile
      operationId: deleteLocalConnectionProfile
      parameters:
      - name: server
        in: path
        description: The name of the Control-M in which the connection profile is
          deployed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The name of the agent the connection profile is deployed on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: path
        description: The type of connection profile to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Name of the Connection Profile
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Connection Profile was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /deploy/connectionprofile/centralized/{type}/{name}:
    delete:
      tags:
      - deploy
      summary: Delete centralized Connection Profile
      description: Delete centralized Connection Profile
      operationId: deleteSharedConnectionProfile
      parameters:
      - name: type
        in: path
        description: The type of connection profile to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Name of the Connection Profile
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Connection Profile was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
  /deploy/connectionprofile/test:
    post:
      tags:
      - deploy
      summary: Test connection profile on agent
      description: Test connection profile on agent
      operationId: testConnectionProfile
      parameters:
      - name: ctm
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: agent
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        "200":
          description: Connection Profile Successful validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Connection Profile not found or not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: test
      x-min-em-version: 9.0.20.000
  /session/login:
    post:
      tags:
      - session
      summary: login user to Control-M
      description: Authenticate the user with the specified password and return a
        token that can be used later in subsequent requests to access Control-M.
      operationId: doLogin
      requestBody:
        description: The credentials to use for login.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResult'
        "401":
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: credentials
  /session/logout:
    post:
      tags:
      - session
      summary: logout user from Control-M
      description: "Disconnects the user session specified by the request authentication\
        \ token, and removes it from the server memory."
      operationId: doLogout
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /session/user/password/update:
    post:
      tags:
      - session
      summary: Change my password
      description: Change my password
      operationId: updateMyPassword
      requestBody:
        description: The new password.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PasswordsObject'
        required: true
      responses:
        "200":
          description: Passwored changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors in password change details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: PasswordsObject
  /archive/search:
    get:
      tags:
      - archive
      summary: Search jobs in Archive
      description: Get all the Control-M Archiving jobs that match the search criterias
      operationId: searchJobs
      parameters:
      - name: limit
        in: query
        description: maximum jobs to fetch (default 500).
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 500
      - name: jobname
        in: query
        description: The name of the job.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobid
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ctm
        in: query
        description: The name of the Control-M server in which the job was ordered
          from.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: The name of the Control-M server in which the job was ordered
          from.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: folder
        in: query
        description: The name of the parent folder.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: fromTime
        in: query
        description: Job execution start date. Date format - YYYY-MM-DD.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: toTime
        in: query
        description: Job execution end date. Date format - YYYY-MM-DD.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: logContains
        in: query
        description: Job log must contain the given phrase.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: outputContains
        in: query
        description: Job output must contain the given phrase.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: application
        in: query
        description: The name of the application the jobs belong to.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: subApplication
        in: query
        description: The name of the sub-application the jobs belong to.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: library
        in: query
        description: The job's library name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: memName
        in: query
        description: Member name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: memLibrary
        in: query
        description: Member's library.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: host
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: hostGroup
        in: query
        description: Job's host group.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: runAs
        in: query
        description: Runs as (username on agent machine).
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: orderId
        in: query
        description: Job's order id.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: status
        in: query
        description: The job's end status.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: All
          enum:
          - All
          - Ended OK
          - Ended Not OK
          x-hidden: true
        x-hidden: true
      - name: orderDateFrom
        in: query
        description: Indicating a date by which will look for jobs that their order
          date started afterwards. Date format - YYYY-MM-DD.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: orderDateTo
        in: query
        description: Indicating a date by which will look for jobs that their order
          date ended before. Date format - YYYY-MM-DD.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: numberOfRuns
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Retrieve all archive jobs matched to search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveJobsList'
        "206":
          description: "Retrieve all archive jobs matched to search parameters, number\
            \ of jobs exceed the limit"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveJobsList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are jobname, jobid, ctm, folder, host,\
        \ application, subApplication, status, orderId, orderDateFrom, orderDateTo,\
        \ fromTime, toTime, folderLibrary, memName, memLibrary, hostGroup, runAs,\
        \ logContains, outputContains and numberOfRuns."
      x-additional-usage:
      - -s <search query>
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /archive/{jobId}/log:
    get:
      tags:
      - archive
      summary: Get job log
      description: Get job log by unique job key
      operationId: getArchiveJobLog
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: runNo
        in: query
        description: The execution number in case of multiple executions
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Result with the requested job log
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Unable to get log from archive server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Job's log can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /archive/{jobId}/output:
    get:
      tags:
      - archive
      summary: Get job output
      description: Get job output by unique job key
      operationId: getArchiveJobOutput
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: runNo
        in: query
        description: The execution number in case of multiple executions
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Result with the requested job output
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Unable to get log from archive server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Job's output can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /build:
    post:
      tags:
      - build
      summary: Compile definitions file to check its validity
      description: Compile the provided definition file (JSON or zip) to verify it
        is valid for Control-M.
      operationId: buildFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_2'
        required: true
      responses:
        "200":
          description: File compiled successfully. No errors were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentFileResults'
                x-content-type: application/json
        "400":
          description: Errors were found in input file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
  /deploy/jobtype:
    post:
      tags:
      - deploy
      summary: Deploy jobtype
      description: "Deploy the provided jobtype to AI server, EM server, and Agent."
      operationId: deployJobtypeFile
      parameters:
      - name: agent
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: server
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_3'
        required: true
      responses:
        "200":
          description: Jobtype deployed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployJobtypeResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
      x-min-em-version: 9.0.20.100
      x-additional-description: params are server and agent
      x-additional-usage:
      - -f <payload file>
  /deploy/transform:
    post:
      tags:
      - deploy
      summary: Transform a definitions file
      description: Transform the provided definitions file (JSON) according to the
        provided Deploy Descriptor file (JSON).
      operationId: transformFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_4'
        required: true
      responses:
        "200":
          description: Transformed file in Json format
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: "bad request, invalid parameters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
  /deploy/jobs:
    get:
      tags:
      - deploy
      summary: Get deployed jobs that match the search criteria.
      description: Get definition of jobs and folders (in the desired format - JSON
        or XML) that match the requested search criteria.
      operationId: getDeployedFoldersNew
      parameters:
      - name: format
        in: query
        description: Output format (json or xml)
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: json
      - name: folder
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ctm
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Exported data in desired format
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are ctm and folder
      x-additional-usage: -s <search query>
  /deploy/folder/{controlM}/{folderName}:
    delete:
      tags:
      - deploy
      summary: delete a folder
      description: Delete a folder
      operationId: deleteFolder
      parameters:
      - name: controlM
        in: path
        description: The name of the Control-M in which the folder(s) are deployed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: folderName
        in: path
        description: The name of the required folder(s).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Folder was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: ctm or folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /deploy/calendars:
    get:
      tags:
      - deploy
      summary: Get deployed calendars that match the search criteria.
      description: Get definition of calendars as json code that match the requested
        search criteria.
      operationId: getDeployedCalendars
      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: type
        in: query
        description: Calendar type.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Regular
          - Periodic
          - RuleBased
          x-hidden: true
        x-hidden: true
      - name: alias
        in: query
        description: Calendar alias name for z/OS servers.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Exported data in desired format
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "404":
          description: Calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-additional-description: "Search fields are name, server, type and alias"
      x-additional-usage: -s <search query>
  /deploy/calendar/{calendarName}:
    delete:
      tags:
      - deploy
      summary: delete a calendar
      description: Delete a calendar
      operationId: deleteCalendar
      parameters:
      - name: calendarName
        in: path
        description: The name of the calendar to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: server
        in: query
        description: The name of the server in which the calendar deploy.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: Global
      responses:
        "200":
          description: Calendar was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: ctm or calendar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
  /deploy/sitestandard/{standardName}/fieldRestriction/{fieldName}:
    get:
      tags:
      - deploy
      summary: Get the allowed values for the specified field in the specified site
        standard.
      description: Get the allowed values for the specified field in the specified
        site standard.
      operationId: getSiteStandardFieldRestrictions
      parameters:
      - name: standardName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: fieldName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Exported data in desired format
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: "Cannot get allowed values, because this field does not have\
            \ any allowed values defined"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Site standard is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.19.000
    post:
      tags:
      - deploy
      summary: Replace the allowed values for the specified field in the specified
        site standard.
      description: Replace the allowed values for the specified field in the specified
        site standard.
      operationId: setSiteStandardFieldRestrictions
      parameters:
      - name: standardName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: fieldName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The JSON file with the allowed values
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FieldValues'
        required: true
      responses:
        "200":
          description: Successful result message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: "Cannot replace allowed values, because this field does not\
            \ have any allowed values defined"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Site standard is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage: -f <json file>
      x-min-em-version: 9.0.19.000
      x-action: replaceValues
      x-codegen-request-body-name: valuesFile
  /provision/images/{os}:
    get:
      tags:
      - provision
      summary: get list of available images for the requested OS
      description: Get a list of the images in the system for the requested OS.
      operationId: getImages
      parameters:
      - name: os
        in: path
        description: The OS name of the requested images.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: query
        description: filter according to specific version.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of all available images
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResult'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: '!'
      x-additional-description: "Search field is version, values are 'latest' for\
        \ the latest versions, '*' for all versions, '<number>' for specific versions\
        \ that contain this number."
      x-additional-usage:
      - -s version=*
  /provision/upgrades/agents:
    get:
      tags:
      - provision
      summary: Get eligible agents for upgrade that match the requested search criteria.
      description: Get eligible agents for upgrade that match the requested search
        criteria from Control-M server.
      operationId: getEligibleAgentsForUpgrade
      parameters:
      - name: type
        in: query
        description: "The type (Agent, MFT, AppPack)."
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: version
        in: query
        description: The version.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The eligible agents for upgrade list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeAgentInfoList'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are type (Agent, MFT, AppPack) and\
        \ version."
      x-additional-usage: -s <search query>
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrade/{upgradeId}:
    get:
      tags:
      - provision
      summary: Get upgrade activity status for specific upgrade id.
      description: Get upgrade activity status for specific upgrade id.
      operationId: getUpgradeActivityStatusPerUpgradeId
      parameters:
      - name: upgradeId
        in: path
        description: The upgrade id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: status of upgrade
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeRecord'
        "404":
          description: Upgrade Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
    delete:
      tags:
      - provision
      summary: Delete upgrade activity status for specific upgrade id.
      description: Delete upgrade activity status for specific upgrade id.
      operationId: deleteUpgradeActivity
      parameters:
      - name: upgradeId
        in: path
        description: The upgrade id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Activity status was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Upgrade Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrades:
    get:
      tags:
      - provision
      summary: Get all upgrade activities status.
      description: Get all upgrade activities status.
      operationId: getAllUpgradeActivitiesStatus
      parameters:
      - name: ctm
        in: query
        description: The Control-M server name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: The Control-M server name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: agent
        in: query
        description: The Control-M Agent name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: fromVersion
        in: query
        description: Current product version
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: toVersion
        in: query
        description: Upgrade to version
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: activity
        in: query
        description: "Activity type (Install, Uninstall)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: status
        in: query
        description: "Upgrade activity status (Cancel, Running, Completed, TransferCompleted,\
          \ Failed, Unavailable)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: activityName
        in: query
        description: Name of the upgrade activity
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: upgrades status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeRecordList'
        "404":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-additional-description: "Search fields are ctm, agent, fromVersion, toVersion,\
        \ activity, status and activityName"
      x-additional-usage: -s <search query>
  /provision/upgrade/{upgradeId}/output:
    get:
      tags:
      - provision
      summary: Returns log of upgrade activity.
      description: Returns log of upgrade activity
      operationId: getUpgradeActivityLog
      parameters:
      - name: upgradeId
        in: path
        description: The upgrade id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Content of upgrade output
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "404":
          description: Upgrade Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrades/versions:
    get:
      tags:
      - provision
      summary: Get available versions for upgrade.
      description: Get available versions for upgrade
      operationId: getDeployVersions
      responses:
        "200":
          description: List of upgrade version info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpgradeInfo'
                x-content-type: application/json
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrade/install:
    post:
      tags:
      - provision
      summary: Transfer and install a product on an agent
      description: Transfer and install a product on an agent
      operationId: transferAndInstallProduct
      requestBody:
        description: Upgrade request details
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpgradeRequest'
        required: true
      responses:
        "200":
          description: Getting upgrade response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: install
      x-additional-usage:
      - -f <configuration file>
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: upgradeRequest
  /provision/upgrade/{upgradeId}/retry:
    post:
      tags:
      - provision
      summary: Retry upgrade activity
      description: Retry upgrade activity
      operationId: retryUpgradeActivity
      parameters:
      - name: upgradeId
        in: path
        description: Id of upgrade to retry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Getting upgrade retry response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Upgrade Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: retry
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrade/{upgradeId}/cancel:
    post:
      tags:
      - provision
      summary: Cancel upgrade activity
      description: Cancel upgrade activity
      operationId: cancelUpgradeActivity
      parameters:
      - name: upgradeId
        in: path
        description: Id of upgrade to cancel
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Getting upgrade cancel response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Upgrade Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: cancel
      x-exclusiveDeliveryMode: onPrem
  /provision/upgrade/uninstall:
    post:
      tags:
      - provision
      summary: Uninstall a product from an agent
      description: Uninstall a product from an agent
      operationId: uninstallProduct
      requestBody:
        description: Rollback request details
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpgradeRequest'
        required: true
      responses:
        "200":
          description: Getting rollback response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-action: uninstall
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: rollbackRequest
  /reporting/report/{name}:
    get:
      tags:
      - reporting
      summary: Retrieves a report by name.
      description: "Retrieves a report by name in the desired format (CSV,PDF ,EXCEL).\
        \ If the report is shared, add [shared:] before the name. This REST API command\
        \ will be deprecated soon."
      operationId: getReportByName
      parameters:
      - name: name
        in: path
        description: The report name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: format
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Report Url.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResult'
        "401":
          description: No Access to report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: No such report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage: -o
      x-additional-props: "{\"outputfile\":\"reportURL\"}"
      x-hidden: true
      x-action: get_old
      x-exclusiveDeliveryMode: onPrem
  /reporting/report:
    post:
      tags:
      - reporting
      summary: Run a report
      description: "Sends a request to generate a report asynchronously and returns\
        \ the request status. If the report is shared, add [shared:] before the name."
      operationId: runReport
      requestBody:
        description: The report generation parameters
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunReport'
        required: true
      responses:
        "200":
          description: Report generagion request info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunReportInfo'
        "401":
          description: No Access to report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: No such report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-action: '!'
      x-codegen-request-body-name: reportRun
  /reporting/status/{reportId}:
    get:
      tags:
      - reporting
      summary: Retrieves status information for a report generation request based
        on the report ID
      description: Retrieves status information for a report generation request based
        on the report ID
      operationId: getReportStatus
      parameters:
      - name: reportId
        in: path
        description: The ID of the report
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Report generagion request info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunReportInfo'
        "404":
          description: No such request ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /reporting/reportFilters/{name}:
    get:
      tags:
      - reporting
      summary: Retrieves report filters
      description: Retrieves report filters
      operationId: getReportFilters
      parameters:
      - name: name
        in: path
        description: The report name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Report generagion request info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunReport'
        "404":
          description: No such report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
  /run:
    post:
      tags:
      - run
      summary: Run jobs
      description: Run jobs according to given definitions file (JSON or zip).
      operationId: runJobs
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_5'
        required: true
      responses:
        "200":
          description: Run result that can be used to track run jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResult'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -i
      x-additional-props: "{\"interactive\":\"monitorPageURI\"}"
      x-action: '!'
  /run/order:
    post:
      tags:
      - run
      summary: Execute requested jobs in certain folder
      description: Run jobs from selected folder according to given filter
      operationId: orderJobsInFolder
      requestBody:
        description: parameters to select the jobs to run
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderFolderParameters'
        required: false
      responses:
        "200":
          description: Run result that can be used to track run jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResult'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file> -i
      x-additional-props: "{\"interactive\":\"monitorPageURI\"}"
      x-action: '!'
      x-codegen-request-body-name: data
  /run/job/{jobId}/status:
    get:
      tags:
      - run
      summary: Get status of a job
      description: Get the job status.
      operationId: getJobStatus
      parameters:
      - name: jobId
        in: path
        description: Job ID returned from the run status action.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Result with the requested statuses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRunStatus'
        "404":
          description: run Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/jobs/status:
    get:
      tags:
      - run
      summary: Get jobs that match the search criteria.
      description: Get status of jobs that match the requested search criteria.
      operationId: getJobsStatusByFilter
      parameters:
      - name: limit
        in: query
        description: maximum jobs status to fetch (default 1000).
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 1000
      - name: jobname
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ctm
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: application
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: subApplication
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: host
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: folder
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: description
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobid
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: neighborhood
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: depth
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          x-hidden: true
        x-hidden: true
      - name: direction
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: orderDateFrom
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: orderDateTo
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: fromTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: toTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: folderLibrary
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: hostGroup
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: runAs
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: command
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: filePath
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: fileName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: workloadPolicy
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ruleBasedCalendar
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: resourceMutex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: resourceSemaphore
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: resourceLock
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: resourcePool
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: held
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          x-hidden: true
        x-hidden: true
      - name: folderHeld
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          x-hidden: true
        x-hidden: true
      - name: cyclic
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          x-hidden: true
        x-hidden: true
      - name: deleted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Result with the requested statuses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResult'
        "206":
          description: "Result with the requested statuses, number of jobs exceed\
            \ the limit."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResult'
        "400":
          description: "bad request, invalid parameters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are jobname, jobid, ctm, folder, host,\
        \ application, subApplication, status, orderDateFrom, orderDateTo , fromTime,\
        \ toTime, folderLibrary, hostGroup, runAs, command, filePath, fileName, workloadPolicy,\
        \ ruleBasedCalender, resourceLock, resourcePool, description, held, folderHeld,\
        \ cyclic and deleted."
      x-additional-usage: -s <search query>
  /run/status/{runId}:
    get:
      tags:
      - run
      summary: Get status of running jobs
      description: Run status of jobs started with the Run service.
      operationId: getJobsStatus
      parameters:
      - name: runId
        in: path
        description: Run ID returned from the run action.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: startIndex
        in: query
        description: The index of the job status from which to start. returning results
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 0
      responses:
        "200":
          description: Result with the requested statuses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResult'
        "404":
          description: run Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -i
      x-additional-props: "{\"interactive\":\"monitorPageURI\"}"
      x-action: '!'
  /run/job/{jobId}/output:
    get:
      tags:
      - run
      summary: Get job output
      description: Get the output returned from a job.
      operationId: getJobOutput
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: runNo
        in: query
        description: The execution number in case of multiple executions (0 will get
          the last execution's output)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 0
      responses:
        "200":
          description: Result with the requested job output.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "404":
          description: Order Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/job/{jobId}/statistics:
    get:
      tags:
      - run
      summary: Get job statistics
      description: Get the statistics from a job.
      operationId: getJobStatistics
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Result with the requested job's statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
            text/plain:
              schema:
                $ref: '#/components/schemas/Statistics'
        "404":
          description: Job ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/job/{jobId}/rerun:
    post:
      tags:
      - run
      summary: Run job again
      description: Run an already executed job (again).
      operationId: rerunJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The JSON file with the restart configuration and parameters
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RerunParameters'
        required: false
      responses:
        "200":
          description: Job execution details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRunStatus'
        "404":
          description: Job id not found
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-action: rerun
      x-additional-usage: -f <rerun advance parameters file>
      x-codegen-request-body-name: rerunParameters
  /run/job/{jobId}/log:
    get:
      tags:
      - run
      summary: Get job's log
      description: Get the job execution log.
      operationId: getJobLog
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The requested job log.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/job/{jobId}/kill:
    post:
      tags:
      - run
      summary: Cancel running job
      description: Abort job execution.
      operationId: killJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The cancelled job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: kill
  /run/job/{jobId}/runNow:
    post:
      tags:
      - run
      summary: Bypass scheduling cretirias and start the job
      description: start a job immediately
      operationId: runNow
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: runNow
  /run/job/{jobId}/hold:
    post:
      tags:
      - run
      summary: hold the job so it will not start untill it is freed
      description: hold the job
      operationId: holdJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: hold
  /run/job/{jobId}/free:
    post:
      tags:
      - run
      summary: free an already held the job
      description: free the job
      operationId: freeJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: free
  /run/job/{jobId}/confirm:
    post:
      tags:
      - run
      summary: confirm a job
      description: confirm a job that waits for confirmation
      operationId: confirmJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: confirm
  /run/job/{jobId}/setToOk:
    post:
      tags:
      - run
      summary: set job end status to OK
      description: "set job status to OK, post processing action"
      operationId: setToOK
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: setToOk
  /run/job/{jobId}/delete:
    post:
      tags:
      - run
      summary: mark job as deleted
      description: mark delete as deleted
      operationId: deleteJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: delete
  /run/job/{jobId}/undelete:
    post:
      tags:
      - run
      summary: recover a mark for deletion job
      description: recover a mark for deletion job
      operationId: undeleteJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: undelete
  /run/job/{jobId}/waitingInfo:
    get:
      tags:
      - run
      summary: get job's waiting information
      description: get the reason why the job is in waiting status
      operationId: getWaitingInfo
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResult'
        "404":
          description: Job Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: waitingInfo
  /run/job/{jobId}/get:
    get:
      tags:
      - run
      summary: get active job
      description: get the active job's data by job's order ID
      operationId: getActiveJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Exported data in desired format
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: get
      x-min-em-version: 9.0.18.000
  /run/job/{jobId}/modify:
    post:
      tags:
      - run
      summary: Modify active job
      description: "Modify active job, specified by order id according to given definitions\
        \ file (JSON)."
      operationId: modifyJob
      parameters:
      - name: jobId
        in: path
        description: The job ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_6'
        required: true
      responses:
        "200":
          description: Run result that can be used to track run jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: modify
      x-min-em-version: 9.0.18.000
  /run/resource/{server}:
    post:
      tags:
      - run
      summary: Add a new pool resource.
      description: Add a new pool resource.
      operationId: addResource
      parameters:
      - name: server
        in: path
        description: The Control-M Server hosting the resource.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The defined resource name.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResourceParam'
        required: true
      responses:
        "200":
          description: The cancelled job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-codegen-request-body-name: resource
  /run/resource/{server}/{name}:
    post:
      tags:
      - run
      summary: Update a pool resource.
      description: Update a pool resource.
      operationId: updateResource
      parameters:
      - name: server
        in: path
        description: The Control-M Server hosting the resource.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Resource name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The defined resource name.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResourceMax'
        required: true
      responses:
        "200":
          description: Update sucssesful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-codegen-request-body-name: max
    delete:
      tags:
      - run
      summary: Delete a pool resource.
      description: Delete a pool resource.
      operationId: deleteResource
      parameters:
      - name: server
        in: path
        description: The Control-M Server hosting the resource.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Resource name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Update sucssesful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/resources:
    get:
      tags:
      - run
      summary: Get all resources records matching search.
      description: Get all resources records matching search.
      operationId: getResources
      parameters:
      - name: ctm
        in: query
        description: Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: name
        in: query
        description: The resource name filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Result with the requested resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSet'
        "404":
          description: No such control-m
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are ctm, name"
      x-additional-usage: -s <search query>
  /run/event/{server}:
    post:
      tags:
      - run
      summary: Add a new  event.
      description: "Add a new  event. date may be of format MMDD, ODAT to set current\
        \ controlm date, STAT to set no date. default value is ODAT."
      operationId: addEvent
      parameters:
      - name: server
        in: path
        description: The Control-M Server hosting the event.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The defined event name.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EventParam'
        required: true
      responses:
        "200":
          description: The cancelled job run id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-codegen-request-body-name: event
  /run/event/{server}/{name}/{date}:
    delete:
      tags:
      - run
      summary: Delete a  event.
      description: Delete a  event.
      operationId: deleteEvent
      parameters:
      - name: server
        in: path
        description: The Control-M Server hosting the event.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: event name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: date
        in: path
        description: event date
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Update sucssesful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /run/events:
    get:
      tags:
      - run
      summary: Get all events records for specific search.
      description: Get all events records for specific search.
      operationId: getEvents
      parameters:
      - name: ctm
        in: query
        description: Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: name
        in: query
        description: The event name filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: date
        in: query
        description: The event date filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: limit
        in: query
        description: maximum events to fetch (default 1000).
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          default: 1000
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Result with the requested events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSet'
        "404":
          description: No such control-m
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Search fields are ctm, name, date"
      x-additional-usage: -s <search query>
  /run/workloadpolicies:
    get:
      tags:
      - run
      summary: get workload policies
      description: Get all the workload policies.
      operationId: getWorkloadPolicies
      parameters:
      - name: state
        in: query
        description: "Optionally state filter. Available values Active, Inactive"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of all the workload policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadPolicyList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /run/workloadpolicy/{policy}/activate:
    post:
      tags:
      - run
      summary: activate workload policy
      description: "Activate a workload policy, supports wildcard in names"
      operationId: activateWorkloadPolicy
      parameters:
      - name: policy
        in: path
        description: The policy name to be activated. Case sensitive. Wildcards can
          be used.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ctm
        in: query
        description: Optional Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: server
        in: query
        description: Optional Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Policy was successfully activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadPolicyStateList'
        "404":
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-action: activate
  /run/workloadpolicy/{policy}/deactivate:
    post:
      tags:
      - run
      summary: deactivate a workload policy
      description: "Deactivate a workload policy, supports wildcard in names"
      operationId: deactivateWorkloadPolicy
      parameters:
      - name: policy
        in: path
        description: The policy name to be deactivated. Case sensitive. Wildcards
          can be used.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ctm
        in: query
        description: Optional Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: server
        in: query
        description: Optional Control-M Server filter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Policy was successfully deactivated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadPolicyStateList'
        "404":
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-action: deactivate
  /run/alerts:
    post:
      tags:
      - run
      summary: Update alert.
      description: Update alert.
      operationId: updateAlert
      requestBody:
        description: File that contains the alert propery that want to be update.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AlertParam'
        required: true
      responses:
        "200":
          description: Update sucssesful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-action: update
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: alertModifyValue
  /run/alerts/status:
    post:
      tags:
      - run
      summary: Update alert status.
      description: Update alert status.
      operationId: updateAlertStatus
      requestBody:
        description: File that contains the alert status propery that want to be update.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AlertStatusParam'
        required: true
      responses:
        "200":
          description: Update status sucssesful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Control-M not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-action: update
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: alertModifyStatusValue
  /run/services/sla:
    get:
      tags:
      - run
      summary: Get SLA active services
      description: Get all SLA active services
      operationId: getActiveServices
      responses:
        "200":
          description: All services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveServices'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.200
  /config/server/{server}/hostgroup/{hostgroup}:
    post:
      tags:
      - config
      summary: update agents in hostgroup.
      description: update agents in hostgroup.
      operationId: updateHostsInHostgroup
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostgroup
        in: path
        description: The hostgroup name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Agent list to update in a hostgroup
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/HostgroupProperties'
        required: true
      responses:
        "200":
          description: successfully created hostgroup or updated agents in existing
            hostgroup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Failed to add agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "403":
          description: Permission denied error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-min-em-version: 9.0.19
      x-action: update
      x-codegen-request-body-name: hostGroupMemberParamsList
    delete:
      tags:
      - config
      summary: delete host group
      description: delete host group
      operationId: deleteHostGroup
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostgroup
        in: path
        description: The hostgroup name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Host Group was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Failed to delete hostgroup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "403":
          description: Permission denied error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.19
  /config/authorization/user/effectiveRights:
    get:
      tags:
      - config
      summary: Get user real effective authorizations
      description: Get user real effective authorizations by all his roles
      operationId: getUserEffectiveRights
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        "401":
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.080
  /config/em/param/{name}:
    post:
      tags:
      - config
      summary: set value of a an em system parameter
      description: Set value of an enterprise management system parameter
      operationId: setSystemParam
      parameters:
      - name: name
        in: path
        description: Parameter name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Param new value
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        "200":
          description: server was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server or folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: set
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: newValue
  /config/server/{server}:
    delete:
      tags:
      - config
      summary: Delete Server
      description: Delete Server
      operationId: removeControlmServer
      parameters:
      - name: server
        in: path
        description: Server host name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Server was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server or folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/failover:
    put:
      tags:
      - config
      summary: Perform Manual Failover on a specified Server
      description: Perform Manual Failover on a specified Server
      operationId: failover
      parameters:
      - name: server
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: MFO successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: failover
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/setasprimary:
    put:
      tags:
      - config
      summary: Set secondary server as Primary on a specified Server
      description: Set secondary server as Primary on a specified Server
      operationId: setasprimary
      parameters:
      - name: server
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Set as Primary successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: setasprimary
      x-exclusiveDeliveryMode: onPrem
  /config/servers:
    get:
      tags:
      - config
      summary: get all the Servers name and hostname in the system
      description: Get the names and hostnames of all Servers in the system.
      operationId: getServers
      responses:
        "200":
          description: Servers hostname (list)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtmDetailsList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server:
    post:
      tags:
      - config
      summary: add server to the system
      description: Add a Server. This command setting up new server in the system
      operationId: addServer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddServerParams'
        required: true
      responses:
        "200":
          description: Server was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Failed to add the erver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: body
  /config/server/{server}/params:
    get:
      tags:
      - config
      summary: get Server parameters
      description: Get all the parameters of the specified Server.
      operationId: getServerParameters
      parameters:
      - name: server
        in: path
        description: The Server to query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Server parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueListResult'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agent/{agent}/ping:
    post:
      tags:
      - config
      summary: ping to the agent in the Server
      description: Ping an Agent.
      operationId: pingAgent
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PingAgentParams'
        required: false
      responses:
        "200":
          description: Ping to the agent was successfully requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: "bad request, invalid patrameners"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: ping not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: ping
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: body
  /config/server/{server}/agent/{agent}/enable:
    post:
      tags:
      - config
      summary: enable agent from the Server
      description: Enable an Agent. This command does not install or configure the
        agent. It only enable existing agent in the system.
      operationId: enableAgent
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected too.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent to be enabled.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Agent was successfully enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: enable
  /config/server/{server}/agent/{agent}/disable:
    post:
      tags:
      - config
      summary: disable agent from the Server
      description: Disable an Agent.
      operationId: disableAgent
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected too.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent to be disabled.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Agent was successfully disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: disable
  /config/item/{id}/recycle:
    post:
      tags:
      - config
      summary: recycle item
      description: Recycle an item
      operationId: recycleItem
      parameters:
      - name: id
        in: path
        description: item data
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Item was successfully recycled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: recycle
      x-min-em-version: 9.0.19.000
  /config/server/{server}/remotehost:
    post:
      tags:
      - config
      summary: add remote host to Server
      description: Add a remote host to Server.
      operationId: addRemoteHost
      parameters:
      - name: server
        in: path
        description: The Server the remote host is going to be added to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: "The non default, advanced configuration data"
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddRemoteHostParams'
        required: false
      responses:
        "200":
          description: Remote host was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: data
  /config/server/{server}/remotehost/{remotehost}:
    get:
      tags:
      - config
      summary: get a remote host configuration from Server
      description: Get the remote host configuration properties from the Server
      operationId: getRemoteHostProperties
      parameters:
      - name: server
        in: path
        description: The Server the remote host  is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: remotehost
        in: path
        description: The name of the remote host.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The configuration properties of the remote host in the form
            of key value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddRemoteHostParams'
        "404":
          description: server or remote host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
    delete:
      tags:
      - config
      summary: delete a remote host from Server
      description: Delete a remote host from a Server.
      operationId: deleteRemoteHost
      parameters:
      - name: server
        in: path
        description: The Server the remote host is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: remotehost
        in: path
        description: The name of the remote host to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Remote host was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server or remote host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/remotehost/{remotehost}/authorize:
    post:
      tags:
      - config
      summary: Authorize
      description: Authorized known ssh remote host.
      operationId: authorizeSshKnownRemotehost
      parameters:
      - name: server
        in: path
        description: The Server the remote host is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: remotehost
        in: path
        description: The name of the remote host.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Remote host was successfully authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server or remote host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: authorize
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agents:
    get:
      tags:
      - config
      summary: get Server agents
      description: Get all the agents of the specified Server.
      operationId: getAgents
      parameters:
      - name: server
        in: path
        description: The Server to query. Optionally you can filter agent name of
          host or alias of the Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: query
        description: Optionally case insensitive agent name filter of host or alias
          of the Agent. `ctm server:agents::get Server AgentName` returns all agents
          which names start with `agentname`
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of all the server agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDetailsList'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/remotehosts:
    get:
      tags:
      - config
      summary: get Server remote hosts
      description: Get all the remote hosts of the specified Server.
      operationId: getRemoteHosts
      parameters:
      - name: server
        in: path
        description: The Server to query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of all the server remote hosts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResult'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agent/{agent}:
    delete:
      tags:
      - config
      summary: delete an agent from Server
      description: Delete an agent from a Server. This will not shut the agent down.
        It only disconnects and removes it from the list.
      operationId: deleteAgent
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The name of the agent to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Agent was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: server or agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/agent/{agent}/params:
    get:
      tags:
      - config
      summary: get agent parameters
      description: Get all the parameters of the specified Agent.
      operationId: getAgentParameters
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The name of the agent to query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: extendedData
        in: query
        description: True to return more agent parameters. HIDDEN
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: The Agent parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueListResult'
        "404":
          description: server or agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/agent/{agent}/param/{name}:
    post:
      tags:
      - config
      summary: set agent parameter
      description: Set the value of the specified parameter in the specified agent.
      operationId: setAgentParameter
      parameters:
      - name: server
        in: path
        description: The Server the agent is connected to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The name of the agent to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The parameter name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The new parameter value.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        "200":
          description: The Agent parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
        "404":
          description: "server, agent or parameter name not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: set
      x-codegen-request-body-name: body
  /config/server/{server}/hostgroups:
    get:
      tags:
      - config
      summary: get Server hostgroups
      description: Get all the hostgroups of the specified Server.
      operationId: getHostgroups
      parameters:
      - name: server
        in: path
        description: The Server the hostgroups belong to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of all the server hostgroups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResult'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/hostgroup/{hostgroup}/agents:
    get:
      tags:
      - config
      summary: get hostgroup agents
      description: Get the agents that compose the specified hostgroup
      operationId: getHostsInGroup
      parameters:
      - name: server
        in: path
        description: The Server the hostgroup belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostgroup
        in: path
        description: The hostgroup name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of all the agents in the hostgroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsInGroupListResult'
        "404":
          description: server or hostgroup not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/hostgroup/{hostgroup}/agent:
    post:
      tags:
      - config
      summary: add agent to hostgroup
      description: Add an agent to hostgroup. Create the the hostgroup if it does
        not exist.
      operationId: addHostToHostgroup
      parameters:
      - name: server
        in: path
        description: The Server the hostgroup belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostgroup
        in: path
        description: The hostgroup name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The hostname of the new agent
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AgentInHostgroup'
        required: true
      responses:
        "200":
          description: The agent was added to the specified hostgroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsInGroupSuccessData'
        "404":
          description: server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: agent
  /config/server/{server}/hostgroup/{hostgroup}/agent/{host}:
    delete:
      tags:
      - config
      summary: delete an agent from a hostgroup
      description: Delete an agent from the specified hostgroup. If the group is empty
        it will also be deleted.
      operationId: deleteHostFromGroup
      parameters:
      - name: server
        in: path
        description: The Server the hostgroup belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostgroup
        in: path
        description: The hostgroup name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: host
        in: path
        description: The agent to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The agent was deleted from the specified hostgroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsInGroupSuccessData'
        "403":
          description: Permission denied error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: "server or hostgroup not found, or agent not found in hostgroup."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/secrets:
    get:
      tags:
      - config
      summary: Get list of secret names
      description: Get the list of names of all the secrets in the vault
      operationId: listSecrets
      responses:
        "200":
          description: List of all secret names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResult'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/secret:
    post:
      tags:
      - config
      summary: Add a new secret
      description: Add a new secret to the secrets vault.
      operationId: addSecret
      requestBody:
        description: The new secret value
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SecretKeyValue'
        required: true
      responses:
        "200":
          description: Secret was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Secret already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-prompt:
      - -p
      x-codegen-request-body-name: nameValue
  /config/secret/{name}:
    post:
      tags:
      - config
      summary: Update an existing secret
      description: Update an existing secret in the secrets vault.
      operationId: updateSecret
      parameters:
      - name: name
        in: path
        description: The name of the secret to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The new value for the secret
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SecretValue'
        required: false
      responses:
        "200":
          description: Secret was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-additional-prompt:
      - -p
      x-codegen-request-body-name: value
    delete:
      tags:
      - config
      summary: Delete an existing secret
      description: Delete an existing secret from the secrets vault.
      operationId: deleteSecret
      parameters:
      - name: name
        in: path
        description: The name of the secret to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Secret was deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/archive/cleanup:
    delete:
      tags:
      - config
      summary: Deletes data (jobs including outputs and logs) from the Workload Archiving
        database.
      description: Deletes data (jobs including outputs and logs) by search criteria
        from the Workload Archiving database.
      operationId: sendArchiveCleanupRequest
      parameters:
      - name: application
        in: query
        description: Job's application.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: applicationExceptions
        in: query
        description: Cleanup should skip job's application that are mentioned in exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: subApplication
        in: query
        description: Job's sub application
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: subApplicationExceptions
        in: query
        description: Job's sub application exception
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ctm
        in: query
        description: server name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: server
        in: query
        description: Server name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ctmExceptions
        in: query
        description: server exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: serverExceptions
        in: query
        description: Server exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: folder
        in: query
        description: Job's folder.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: folderExceptions
        in: query
        description: Job's folder exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobname
        in: query
        description: Job's name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobnameExceptions
        in: query
        description: Job's name exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: library
        in: query
        description: Job's library
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: libraryExceptions
        in: query
        description: Job's library exceptions
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ruleName
        in: query
        description: Job's archive rule
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: jobStatus
        in: query
        description: The job's end status.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Ended OK
          - Ended Not OK
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: Workload Archiving cleanup completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: "Cleanup fields are jobname, jobnameExceptions, server,\
        \ serverExceptions, folder, folderExceptions, application, applicationExceptions,\
        \ subApplication, subApplicationExceptions, library, libraryExceptions, jobStatus\
        \ and ruleName."
      x-additional-usage: -s <search query>
      x-action: cleanup
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/archive/statistics:
    get:
      tags:
      - config
      summary: Get Workload Archiving statistics
      description: "Get list of statistical information for each Archiving rule and\
        \ total information about the number of jobs that have been archived, data\
        \ size of all job logs and outputs that have been archived, size of the Workload\
        \ Archiving database including all tables and indexes and percentage of disk\
        \ space used on the Workload Archiving server"
      operationId: getArchiveStatistics
      responses:
        "200":
          description: Archiving statistics per rule (list)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesStatisticListSummary'
        "401":
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/archive/rules:
    get:
      tags:
      - config
      summary: Get all Workload Archiving rules
      description: Get all the Archiving rules
      operationId: getAllArchiveRules
      responses:
        "200":
          description: Workload Archiving rules (list)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveRulesList'
        "401":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/archive/rule:
    post:
      tags:
      - config
      summary: Add Workload Archiving rule
      description: Add a new Workload Archiving rule
      operationId: addArchiveRule
      requestBody:
        description: archive rule details to add
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ArchiveRule'
        required: true
      responses:
        "200":
          description: Archive rule was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: add
      x-additional-usage: -f <configuration file>
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: archiveRule
  /config/archive/rule/{ruleName}:
    post:
      tags:
      - config
      summary: Edit Workload Archiving rule
      description: Edit Workload Archiving rule details
      operationId: updateArchiveRule
      parameters:
      - name: ruleName
        in: path
        description: Rule name to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Edit Workload Archiving rule details
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ArchiveRule'
        required: true
      responses:
        "200":
          description: Workload Archiving rule was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: rule was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-additional-usage: -f <configuration file>
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: archiveRule
    delete:
      tags:
      - config
      summary: Delete Workload Archiving rule
      description: Deletes Workload Archiving rule by name. It is required to send
        deleteRuleData flag to specify if rule need to be deleted with all the collected
        data or deleteRuleWithoutData otherwise.
      operationId: deleteArchiveRule
      parameters:
      - name: ruleName
        in: path
        description: Rule name to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deleteRuleDataFlag
        in: query
        description: Remove rule with collected data or without. REQUIRED.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - deleteRuleData
          - deleteRuleWithoutData
      responses:
        "200":
          description: Archive rule was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: rule was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "503":
          description: Archive add-on is not installed or down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: delete
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/runasuser:
    post:
      tags:
      - config
      summary: Add a new Run-as user
      description: Add a new Run-as user to server.
      operationId: createRunAsUser
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Run as user data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunAsUserData'
        required: true
      responses:
        "200":
          description: Run-as user was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Run-as user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User is not authorized on the agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-additional-prompt:
      - -p
      x-codegen-request-body-name: runAsUserData
  /config/server/{server}/runasuser/{agent}/{user}/test:
    post:
      tags:
      - config
      summary: Test existed Run-as user
      description: Test existing Run-as user in server.
      operationId: testRunAsUser
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Run as user details data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunAsUserDetailsData'
        required: false
      responses:
        "200":
          description: Test is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Test Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User is not authorized on the agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Run-As user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: test
      x-additional-usage:
      - -f <configuration file>
      x-codegen-request-body-name: runAsUserDetailsData
  /config/server/{server}/runasuser/{agent}/{user}:
    get:
      tags:
      - config
      summary: Get Run-as user
      description: Get Run-as user details from server.
      operationId: getRunAsUser
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The Run-as user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAsUserData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Run-as user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
    post:
      tags:
      - config
      summary: Update Run-as user
      description: Update Run-as user details in server.
      operationId: updateRunAsUser
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Run as user details data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunAsUserDetailsData'
        required: true
      responses:
        "200":
          description: The Run-as was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User is not authorized on the agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Run-As user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-additional-usage:
      - -f <configuration file>
      x-additional-prompt:
      - -p
      x-codegen-request-body-name: runAsUserDetailsData
    delete:
      tags:
      - config
      summary: delete Run-as user
      description: Delete Run-as user from server
      operationId: deleteRunAsUser
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Run-as user was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: User is not authorized on the agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Run-as user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: delete
  /config/server/{server}/runasusers:
    get:
      tags:
      - config
      summary: Get Run-as user list that match the requested search criteria.
      description: Get Run-as user list that match the requested search criteria from
        server.
      operationId: getRunAsUsersList
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user
        in: query
        description: The Run-as user.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: agent
        in: query
        description: The agent.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The Run-as users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAsUsersList'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are user and agent.
      x-additional-usage:
      - -s <search query>
  /config/authorization/role:
    post:
      tags:
      - config
      summary: Add Authorization Role
      description: Add Authorization Role
      operationId: addRole
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_7'
        required: true
      responses:
        "200":
          description: Role added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found in input file or role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/authorization/role/{role}:
    get:
      tags:
      - config
      summary: Get Authorization Role
      description: Get Authorization Role
      operationId: getRole
      parameters:
      - name: role
        in: path
        description: The Role name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The role definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        "404":
          description: Role was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
    post:
      tags:
      - config
      summary: Update Authorization Role
      description: Update Authorization Role
      operationId: updateRole
      parameters:
      - name: role
        in: path
        description: The Role name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_8'
        required: true
      responses:
        "200":
          description: Role update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found in input file or role not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
    delete:
      tags:
      - config
      summary: Delete Authorization Role
      description: Delete Authorization Role
      operationId: deleteAuthorizationRole
      parameters:
      - name: role
        in: path
        description: The Role name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Role was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/authorization/roles:
    get:
      tags:
      - config
      summary: Get Authorization Roles
      description: Get Authorization Roles
      operationId: getAllAuthorizationRoles
      parameters:
      - name: role
        in: query
        description: The Role name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: description
        in: query
        description: The Role description.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of authorization roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleHeaderList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are role.
      x-additional-usage:
      - -s <search query>
  /config/authorization/ldap/{ldapgroup}/role/{role}:
    post:
      tags:
      - config
      summary: Add a role to LDAP group
      description: Add a role to LDAP group so any user belong to the LDAP group will
        get all permissions defined in the role
      operationId: addRoleToLdapGroup
      parameters:
      - name: ldapgroup
        in: path
        description: Name of LDAP group
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Name of role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ldap group was successfully added to role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found when adding ldap to role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Role was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
    delete:
      tags:
      - config
      summary: Delete a role from LDAP group
      description: Delete a role from LDAP group
      operationId: deleteRoleFromLdapGroup
      parameters:
      - name: ldapgroup
        in: path
        description: Name of LDAP group
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Name of role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ldap group was successfully deleted from role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found when deleting ldap from role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Role was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/authorization/ldap/{ldapgroup}/roles:
    get:
      tags:
      - config
      summary: Get Authorization Roles associated with an LDAP group
      description: Get Authorization Roles associated with an LDAP group
      operationId: getAllRolesAssociatedWithLdap
      parameters:
      - name: ldapgroup
        in: path
        description: Name of Ldap group
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: query
        description: The Role name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of authorization roles associated with the ldap group
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "404":
          description: Ldap was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are role name.
      x-additional-usage:
      - -s <search query>
  /config/authorization/ldaps:
    get:
      tags:
      - config
      summary: Get All LDAP groups
      description: Get All LDAP groups
      operationId: getAllLdapGroups
      parameters:
      - name: ldap
        in: query
        description: The ldap name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of ldap groups
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are ldap name.
      x-min-em-version: 9.0.19.000
      x-additional-usage:
      - -s <search query>
  /config/authorization/user:
    post:
      tags:
      - config
      summary: Add user
      description: Add user
      operationId: addUser
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_9'
        required: true
      responses:
        "200":
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found in input file or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/authorization/user/{user}:
    get:
      tags:
      - config
      summary: Get user
      description: Get user
      operationId: getUser
      parameters:
      - name: user
        in: path
        description: The user name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The user definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        "404":
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
    post:
      tags:
      - config
      summary: Update user
      description: Update user
      operationId: updateUser
      parameters:
      - name: user
        in: path
        description: The user name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_10'
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Errors were found in input file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
    delete:
      tags:
      - config
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      parameters:
      - name: user
        in: path
        description: The user name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/authorization/users:
    get:
      tags:
      - config
      summary: Get users
      description: Get users
      operationId: getAllUsers
      parameters:
      - name: name
        in: query
        description: The user name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: fullName
        in: query
        description: The user full name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: description
        in: query
        description: The user description.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: List of authorization users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserHeader'
                x-content-type: application/json
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-description: Search fields are user.
      x-additional-usage:
      - -s <search query>
  /config/authorization/user/{user}/role/{role}:
    post:
      tags:
      - config
      summary: Add a role to user
      description: Add a role to user so that user will inherit role authorization
      operationId: addRoleToUser
      parameters:
      - name: user
        in: path
        description: Name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Name of role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: role was added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: User or role was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
    delete:
      tags:
      - config
      summary: Remove a role from a user
      description: Remove a role from a user
      operationId: removeRoleFromUser
      parameters:
      - name: user
        in: path
        description: Name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Name of role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Role was successfully removed from user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: User or role was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-exclusiveDeliveryMode: onPrem
  /config/user/{user}/password/adminUpdate:
    post:
      tags:
      - config
      summary: Change user password
      description: Change user password
      operationId: changeUserPassword
      parameters:
      - name: user
        in: path
        description: user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The new password.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserPassword'
        required: false
      responses:
        "200":
          description: Passwored changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: password invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: adminUpdate
      x-additional-prompt:
      - -p
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: password
  /config/authorization/role/{role}/associates:
    get:
      tags:
      - config
      summary: Get all authorization entities associated with role
      description: Get all authorization entities associated with role
      operationId: getRoleAssociates
      parameters:
      - name: role
        in: path
        description: role name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of associated entities with role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssociateData'
                x-content-type: application/json
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /config/server/{server}/agent/{agent}/mft/ssh/key:
    post:
      tags:
      - config
      summary: Generate RSA SSH Key
      description: Generate RSA SSH Key pair for SFTP account authentication
      operationId: generateMftRsaSshKey
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Ssh Key pair properites
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SshKeyProperties'
        required: true
      responses:
        "200":
          description: SSH key pair was generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: SSH key with that name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to generate SSH key pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: generate
      x-min-em-version: 9.0.18.000
      x-codegen-request-body-name: sshKeyProperties
  /config/server/{server}/agent/{agent}/mft/pgptemplates:
    get:
      tags:
      - config
      summary: Get PGP Templates
      description: Get PGP Templates
      operationId: getPgpTemplates
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: query
        description: The PGP Template Name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The GPG Templates list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PgpTemplateData'
                x-content-type: application/json
        "401":
          description: The user is not authorized to get pgp templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: get
      x-min-em-version: 9.0.18.000
      x-additional-description: Search fields are name
      x-additional-usage:
      - -s <search query>
  /config/server/{server}/agent/{agent}/mft/pgptemplate/{templateName}:
    put:
      tags:
      - config
      summary: Update PGP Template
      description: Update PGP Template
      operationId: updatePgpTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The PGP Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: PGP Template Data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PgpTemplateData'
        required: true
      responses:
        "200":
          description: PGP template was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: PGP template name cannot be renamed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to get pgp templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: PGP template name wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f pgpTemplateData.json
      x-codegen-request-body-name: pgpTemplateData
    post:
      tags:
      - config
      summary: Add PGP Template
      description: Add PGP Template
      operationId: addPgpTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The PGP Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: PGP Template Data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PgpTemplateData'
        required: true
      responses:
        "200":
          description: PGP template was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: PGP template name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to get pgp templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: add
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f pgpTemplateData.json
      x-codegen-request-body-name: pgpTemplateData
    delete:
      tags:
      - config
      summary: Delete PGP Template
      description: Delete PGP Template
      operationId: deletePgpTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The PGP Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: PGP template was deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to get pgp templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: PGP template wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: delete
      x-min-em-version: 9.0.18.000
  /config/server/{server}/agent/{agent}/mft/configuration:
    get:
      tags:
      - config
      summary: Get MFT Configuration
      description: Get MFT Configuration
      operationId: getMftConfiguration
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The MFT configuration properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MftConfigurationData'
        "401":
          description: The user is not authorized to view MFT configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: get
      x-min-em-version: 9.0.18.000
      x-additional-description: Search fields are name
      x-additional-usage:
      - -s <search query>
    post:
      tags:
      - config
      summary: Update MFT Configuration
      description: Update MFT Configuration
      operationId: updateMftConfiguration
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: MFT Configuration Data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MftConfigurationData'
        required: true
      responses:
        "200":
          description: MFT configuration saved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to set MFT configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f mftConfigurationData.json
      x-codegen-request-body-name: mftConfigurationData
  /config/server/{server}/agent/{agent}/mft/zostemplates:
    get:
      tags:
      - config
      summary: Get z/OS Templates
      description: Get z/OS Templates
      operationId: getZosTemplates
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: query
        description: The z/OS Template Name
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The z/OS Templates list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZosTemplateData'
                x-content-type: application/json
        "401":
          description: The user is not authorized to get z/OS templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: get
      x-min-em-version: 9.0.18.000
      x-additional-description: Search fields are name
      x-additional-usage:
      - -s <search query>
  /config/server/{server}/agent/{agent}/mft/zostemplate/{templateName}:
    put:
      tags:
      - config
      summary: Update z/OS Template
      description: Update z/OS Template
      operationId: updateZosTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The z/OS Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: z/OS Template Data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ZosTemplateData'
        required: true
      responses:
        "200":
          description: z/OS template was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: z/OS template name cannot be renamed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to get z/OS templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: z/OS template name wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f zosTemplateData.json
      x-codegen-request-body-name: zosTemplateData
    post:
      tags:
      - config
      summary: Add z/OS Template
      description: Add z/OS Template
      operationId: addZosTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The z/OS Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: z/OS Template Data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ZosTemplateData'
        required: true
      responses:
        "200":
          description: z/OS template was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: z/OS template name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to get z/OS templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: add
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f zosTemplateData.json
      x-codegen-request-body-name: zosTemplateData
    delete:
      tags:
      - config
      summary: Delete z/OS Template
      description: Delete z/OS Template
      operationId: deleteZosTemplate
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: templateName
        in: path
        description: The z/OS Template Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: z/OS template was deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to get zos templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: z/OS template wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: delete
      x-min-em-version: 9.0.18.000
  /config/mft/externaluser:
    post:
      tags:
      - config
      summary: Add and external user
      description: Add and external user for b2b
      operationId: addExternalUser
      requestBody:
        description: External user data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ExternalUserData'
        required: true
      responses:
        "200":
          description: External user was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: External user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: the user is not authorized to add external user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-additional-prompt:
      - -p
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: externalUserData
  /config/mft/externaluser/{username}:
    post:
      tags:
      - config
      summary: Update an external user
      description: Update an external user for b2b
      operationId: updateExternalUser
      parameters:
      - name: username
        in: path
        description: The external user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: External user data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ExternalUserData'
        required: true
      responses:
        "200":
          description: External user was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: The user is not authorized to update external user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: External user was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-additional-prompt:
      - -p
      x-min-em-version: 9.0.18.000
      x-action: update
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: externalUserData
    delete:
      tags:
      - config
      summary: Delete an external user
      description: Delete an existing external user in MFT
      operationId: deleteExternalUser
      parameters:
      - name: username
        in: path
        description: The name of the external user to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: External user was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to delete external user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: External user was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/externalusers:
    get:
      tags:
      - config
      summary: Get MFT external users that match the search criteria.
      description: Get MFT external users that match the search criteria.
      operationId: getExternalUsers
      parameters:
      - name: name
        in: query
        description: The user name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: email
        in: query
        description: The user email.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: description
        in: query
        description: The user description.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: company
        in: query
        description: The user company.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: phoneNumber
        in: query
        description: The user phoneNumber.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The external users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalUserData'
                x-content-type: application/json
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-additional-description: "Search fields are name, email, description, company\
        \ and phoneNumber"
      x-additional-usage:
      - -s <search query>
      x-exclusiveDeliveryMode: onPrem
  /config/mft/externaluser/{name}/virtualfolders:
    get:
      tags:
      - config
      summary: Get MFT external user authorized folders
      description: Get MFT external user authorized folders
      operationId: getExternalUserAuthorizedFolders
      parameters:
      - name: name
        in: path
        description: The external user name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The external user authorized folders list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "404":
          description: External user was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/virtualfolder:
    post:
      tags:
      - config
      summary: Add virtual folder
      description: Add virtual folder
      operationId: addMFTFolder
      requestBody:
        description: virtual folder data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FolderPropertiesData'
        required: true
      responses:
        "200":
          description: virtual folder was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: virtual folder already existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: the user is not authorized to add virtual folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: folderPropertiesData
  /config/mft/virtualfolder/{folderName}:
    post:
      tags:
      - config
      summary: Update an existing virtual folder in MFT.
      description: Update an existing virtual folder in MFT.
      operationId: updateMFTFolder
      parameters:
      - name: folderName
        in: path
        description: Name of folder
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: virtual folder data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FolderPropertiesData'
        required: true
      responses:
        "200":
          description: Virtual folder was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: the user is not authorized to update virtual folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Virtual folder was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-min-em-version: 9.0.18.000
      x-action: update
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: folderPropertiesData
    delete:
      tags:
      - config
      summary: Delete a virtual folder.
      description: Delete an existing virtual folder in MFT.
      operationId: deleteMFTFolder
      parameters:
      - name: folderName
        in: path
        description: Name of folder
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Virtual folder was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: Virtual folder was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/virtualfolder/{folderName}/user/{userOrGroup}:
    post:
      tags:
      - config
      summary: Add external user or user groups to virtual folder external users list.
      description: Add external user user groups to virtual folder external users
        list.
      operationId: addExternalUserOrUserGroupToMFTFolder
      parameters:
      - name: folderName
        in: path
        description: Name of folder
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userOrGroup
        in: path
        description: The user name or group name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: External ser or user group was added to virtual folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to assign external user or user
            group to virtual folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Virtual folder or user was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
    delete:
      tags:
      - config
      summary: Remove an external user or user group from an existing virtual folder
        in MFT.
      description: Remove an external user or user group from an existing virtual
        folder in MFT.
      operationId: deleteExternalUserOrUserGroupFromMFTFolder
      parameters:
      - name: folderName
        in: path
        description: Name of folder
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userOrGroup
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: External user or user group was removed from virtual folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to remove external user or user
            group from virtual folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Virtual folder or user was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/virtualfolders:
    get:
      tags:
      - config
      summary: Get MFT virtual folders that match the search criteria.
      description: Get MFT virtual folders that match the search criteria.
      operationId: getMFTFolders
      parameters:
      - name: name
        in: query
        description: The virtual folder name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: The virtual folder list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FolderPropertiesData'
                x-content-type: application/json
        "401":
          description: The user is not authorized to view all virtual folders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-additional-description: "Search fields are name, authorizedInternalUsers,\
        \ authorizedExternalUsersAndGroups, allowedFilePattern and blockedFilePattern"
      x-additional-usage:
      - -s <search query>
  /config/mft/usergroup:
    post:
      tags:
      - config
      summary: Add user group.
      description: Add user group.
      operationId: addMftUserGroup
      requestBody:
        description: User group object properites
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserGroupPropertiesData'
        required: true
      responses:
        "200":
          description: User group was added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: User group already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to add user group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-additional-usage:
      - -f <configuration file>
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: UserGroupPropertiesData
  /config/mft/usergroup/{name}:
    post:
      tags:
      - config
      summary: Update user group.
      description: Update user group.
      operationId: updateMftUserGroup
      parameters:
      - name: name
        in: path
        description: User group name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: User group details
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserGroupDetailsData'
        required: true
      responses:
        "200":
          description: User group was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to update user group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User group was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-additional-usage:
      - -f <configuration file>
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: UserGroupDetailsData
    delete:
      tags:
      - config
      summary: Delete user group.
      description: Delete user group.
      operationId: deleteMftUserGroup
      parameters:
      - name: name
        in: path
        description: User group name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User group was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized to delete user group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: User group was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/usergroups:
    get:
      tags:
      - config
      summary: Get all user groups that match the search criteria.
      description: Get all user groups that match the search criteria.
      operationId: getMftUserGroups
      parameters:
      - name: name
        in: query
        description: The user group name.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: externalUsers
        in: query
        description: external users.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      - name: ldapGroups
        in: query
        description: ldap groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-hidden: true
        x-hidden: true
      responses:
        "200":
          description: User group was added.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupPropertiesData'
                x-content-type: application/json
        "401":
          description: The user is not authorized to add user group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-additional-description: "Search fields are name, externalUsers, and ldapGroups"
      x-additional-usage:
      - -s <search query>
  /config/mft/hub/{nodeId}/status:
    get:
      tags:
      - config
      summary: Get hub status.
      description: Get hub status.
      operationId: getHubStatusDetails
      parameters:
      - name: nodeId
        in: path
        description: Node ID of the hub
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The hub status details
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "404":
          description: No hub found on the nodeId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/gateway:
    post:
      tags:
      - config
      summary: add gateway.
      description: add gateway.
      operationId: addGateway
      requestBody:
        description: gateway data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GatewayData'
        required: true
      responses:
        "200":
          description: gateway added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: gatewayData
  /config/mft/gateway/{gatewayName}:
    delete:
      tags:
      - config
      summary: remove gateway.
      description: remove gateway.
      operationId: removeGateway
      parameters:
      - name: gatewayName
        in: path
        description: gateway name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: gateway removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "404":
          description: gateway not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/gateways:
    get:
      tags:
      - config
      summary: Get MFT gateways
      description: Get MFT gateways
      operationId: getMftGateways
      responses:
        "200":
          description: The gateways list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GatewayData'
                x-content-type: application/json
        "400":
          description: Mft version is lower than V20
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/mft/cluster/hub/{agentname}:
    post:
      tags:
      - config
      summary: add hub to cluster.
      description: add hub to cluster.
      operationId: addHubToCluster
      parameters:
      - name: agentname
        in: path
        description: Agent name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: hub added to cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
    delete:
      tags:
      - config
      summary: remove hub from cluster.
      description: remove hub from cluster.
      operationId: removeHubFromCluster
      parameters:
      - name: agentname
        in: path
        description: Agent name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: hub removed from cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agent/{agent}/crt/expiration:
    get:
      tags:
      - config
      summary: Get certificate expiration date.
      description: Get the certificate expiration date of SSL configured Agent.
      operationId: getAgentCertificateExpirationDate
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The Agent certificate expiration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCertificateExpirationData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agent/{agent}/csr:
    post:
      tags:
      - config
      summary: Create certificate signing request (CSR).
      description: Create certificate signing request (CSR) on SSL configured Agent.
      operationId: createAgentCertificateSigningRequest
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Certificate Signing Request (CSR) data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CertificateSigningRequestData'
        required: true
      responses:
        "200":
          description: The CSR was successfully created.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: create
      x-additional-usage: -f <configuration file>
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
      x-codegen-request-body-name: csrData
  /config/server/{server}/agent/{agent}/crt:
    post:
      tags:
      - config
      summary: Deploy certificate (CRT).
      description: Deploy certificate (CRT) on SSL configured Agent.
      operationId: deployAgentCertificate
      parameters:
      - name: server
        in: path
        description: The Server.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_11'
        required: true
      responses:
        "200":
          description: The CRT was successfully deployed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: deploy
      x-min-em-version: 9.0.20.000
      x-exclusiveDeliveryMode: onPrem
  /config/server/{server}/agent/{agent}/mft/ssh/host/{hostname}:
    post:
      tags:
      - config
      summary: Authorize SSH Host
      description: Authorize SSH Host for SFTP account
      operationId: authorizeMftSshHost
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hostname
        in: path
        description: Ssh Hostname
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: port
        in: query
        description: Ssh port for the relevant host
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: SSH host was authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: authorize
      x-min-em-version: 9.0.18.000
  /config/server/{server}/agent/{agent}/mft/ssh/cluster/{clusterName}:
    post:
      tags:
      - config
      summary: Authorize SSH Cluster
      description: Authorize SSH Cluster
      operationId: authorizeMftSshCluster
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: clusterName
        in: path
        description: Ssh Cluster Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: File with content of hostnames and ports
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterAuthorizationData'
        required: true
      responses:
        "200":
          description: SSH cluster was authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "401":
          description: The user is not authorized for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: authorize
      x-min-em-version: 9.0.18.000
      x-additional-usage:
      - -f nodePortDefinitions.json
      x-codegen-request-body-name: hostnamePortList
  /config/server/{server}/agent/{agent}/mft/fts/settings:
    get:
      tags:
      - config
      summary: Get File Transfer Server (FTS) configuration data.
      description: Get File Transfer Server (FTS) configuration data.
      operationId: getFtsSettings
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: File Transfer Server (FTS) configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FtsSettingsData'
        "401":
          description: The user is not authorized to view FTS settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-min-em-version: 9.0.18.000
    post:
      tags:
      - config
      summary: Update File Transfer Server (FTS) configuration data.
      description: Update File Transfer Server (FTS) configuration data.
      operationId: updateFtsSettings
      parameters:
      - name: server
        in: path
        description: The Server
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: agent
        in: path
        description: The Agent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: File Transfer Server (FTS) configuration data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FtsSettingsData'
        required: true
      responses:
        "200":
          description: FTS configuration was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessData'
            text/plain:
              schema:
                $ref: '#/components/schemas/SuccessData'
        "400":
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "401":
          description: The user is not authorized to update FTS settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorList'
      x-action: update
      x-additional-usage: -f <configuration file>
      x-min-em-version: 9.0.18.000
      x-codegen-request-body-name: ftsSettingsData
components:
  schemas:
    AddRemoveSuccessData:
      type: object
      properties:
        message:
          type: string
          description: The success message that describes the performed action.
        currentItems:
          type: array
          description: List of the items remained after the action.
          items:
            type: string
    Matching:
      type: array
      description: "array of 3 items describing the matching term. example [&quot;FileName&quot;,\
        \ &quot;like&quot;, &quot;a*&quot;]"
      items:
        type: string
      x-schema-name: Matching
    TermGroup:
      type: array
      description: "list of matching terms, combined by AND"
      items:
        $ref: '#/components/schemas/Matching'
      x-schema-name: TermGroup
    StringListResult:
      type: array
      items:
        type: string
      x-schema-name: StringListResult
    SuccessData:
      type: object
      properties:
        message:
          type: string
          description: The success message that describes the performed action.
      example:
        message: message
    ErrorData:
      type: object
      properties:
        message:
          type: string
          description: The error message that describes the problem.
        id:
          type: string
          description: An internal identifier of the error.
        item:
          type: string
          description: Reference to the item this error is referring to.
        file:
          type: string
          description: The file this error occurred in.
        line:
          type: integer
          description: The number of line in the file this error occurred in.
        col:
          type: integer
          description: The number of column in the file this error occurred in.
    ErrorList:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorData'
    WarningData:
      type: object
      properties:
        message:
          type: string
          description: The error message that describes the problem.
        id:
          type: string
          description: An internal identifier of the error.
        item:
          type: string
          description: Reference to the item this error is referring to.
        file:
          type: string
          description: The file this error occurred in.
        line:
          type: integer
          description: The number of line in the file this error occurred in.
        col:
          type: integer
          description: The number of column in the file this error occurred in.
      example:
        col: 3
        item: item
        file: file
        line: 9
        id: id
        message: message
    WarningList:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/WarningData'
      example:
        errors:
        - col: 3
          item: item
          file: file
          line: 9
          id: id
          message: message
        - col: 3
          item: item
          file: file
          line: 9
          id: id
          message: message
    DeploymentFileResults:
      type: object
      properties:
        deploymentFile:
          type: string
          description: The name of a specific deployment file.
        successfulFoldersCount:
          type: integer
          description: Determines the number of successfully deployed simple folders.
        successfulSmartFoldersCount:
          type: integer
          description: Determines the number of successfully deployed smart folders.
        successfulSubFoldersCount:
          type: integer
          description: Determines the number of successfully deployed sub folders.
        successfulJobsCount:
          type: integer
          description: Determines the number of successfully deployed sub folders.
        successfulConnectionProfilesCount:
          type: integer
          description: Determines the number of successfully deployed sub folders.
        successfulDriversCount:
          type: integer
          description: Determines the number of successfully deployed sub folders.
        successfulCalendarsCount:
          type: integer
          description: Determines the number of successfully deployed sub folders.
        isDeployDescriptorValid:
          type: boolean
          description: Determines if the deployment file is a valid deploy descriptor
            file.
        deployedFolders:
          type: array
          items:
            type: string
        deployedJobs:
          type: array
          items:
            type: string
        deployedDrivers:
          type: array
          items:
            type: string
        deployedConnectionProfiles:
          type: array
          items:
            type: string
        deployedCalendars:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentFileError'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/WarningList'
      example:
        deploymentFile: deploymentFile
        successfulDriversCount: 2
        successfulCalendarsCount: 7
        warnings:
        - errors:
          - col: 3
            item: item
            file: file
            line: 9
            id: id
            message: message
          - col: 3
            item: item
            file: file
            line: 9
            id: id
            message: message
        - errors:
          - col: 3
            item: item
            file: file
            line: 9
            id: id
            message: message
          - col: 3
            item: item
            file: file
            line: 9
            id: id
            message: message
        successfulJobsCount: 5
        successfulConnectionProfilesCount: 5
        deployedJobs:
        - deployedJobs
        - deployedJobs
        deployedFolders:
        - deployedFolders
        - deployedFolders
        deployedConnectionProfiles:
        - deployedConnectionProfiles
        - deployedConnectionProfiles
        deployedCalendars:
        - deployedCalendars
        - deployedCalendars
        successfulSmartFoldersCount: 6
        deployedDrivers:
        - deployedDrivers
        - deployedDrivers
        successfulSubFoldersCount: 1
        isDeployDescriptorValid: true
        errors:
        - lines:
          - lines
          - lines
        - lines:
          - lines
          - lines
        successfulFoldersCount: 0
    DeploymentFileError:
      type: object
      properties:
        lines:
          type: array
          items:
            type: string
      example:
        lines:
        - lines
        - lines
    WarningsCollection:
      type: object
      properties:
        WarningList:
          type: array
          items:
            type: string
    ArchiveJobsList:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        returned:
          type: integer
        additionalJobsMatchSearchCriteria:
          type: boolean
      example:
        additionalJobsMatchSearchCriteria: true
        jobs:
        - ""
        - ""
        returned: 0
    Job:
      allOf:
      - $ref: '#/components/schemas/JobRunStatus'
      - type: object
        properties:
          duration:
            type: integer
          runAs:
            type: string
          archiveRule:
            type: string
    JobRunStatus:
      required:
      - jobId
      type: object
      properties:
        jobId:
          type: string
          description: Order ID of the job.
        folderId:
          type: string
          description: Order ID of the folder containing this job.
        numberOfRuns:
          type: integer
          description: The run number (in case of cyclic jobs or reruns)
          format: int64
        name:
          type: string
          description: The name of the run job.
        folder:
          type: string
          description: The name of the run job.
        type:
          type: string
          description: The type of the run job.
        status:
          type: string
          description: The status of the run job.
        held:
          type: boolean
          description: Is job held.
        deleted:
          type: boolean
          description: Is job held.
        cyclic:
          type: boolean
          description: Is it a cyclic job.
        startTime:
          type: string
          description: The start time of the job run.
        endTime:
          type: string
          description: The end time of the job run.
        estimatedStartTime:
          type: array
          description: The estimated start time of the jobs.
          items:
            type: string
        estimatedEndTime:
          type: array
          description: The estimated end time of the jobs.
          items:
            type: string
        orderDate:
          type: string
          description: The order date.
        ctm:
          type: string
          description: The controlm server.
        description:
          type: string
          description: The job description.
        host:
          type: string
          description: host machine where the job runs.
        application:
          type: string
          description: job application.
        subApplication:
          type: string
          description: job subApplication.
        jobJSON:
          type: string
          description: The JSON string that describes the job.
        outputURI:
          type: string
          description: A URI that can be used to get the output of the run job
        logURI:
          type: string
          description: A URI that can be used to get the log of the run job
      example:
        estimatedEndTime:
        - estimatedEndTime
        - estimatedEndTime
        subApplication: subApplication
        jobJSON: jobJSON
        held: true
        outputURI: outputURI
        description: description
        numberOfRuns: 0
        estimatedStartTime:
        - estimatedStartTime
        - estimatedStartTime
        type: type
        folderId: folderId
        jobId: jobId
        folder: folder
        deleted: true
        application: application
        name: name
        host: host
        startTime: startTime
        endTime: endTime
        orderDate: orderDate
        ctm: ctm
        cyclic: true
        status: status
        logURI: logURI
    JobStatusResult:
      type: object
      properties:
        statuses:
          type: array
          description: The list of statuses tracked by the given runId.
          items:
            $ref: '#/components/schemas/JobRunStatus'
        startIndex:
          type: integer
          description: The index of the first item in the list.
          format: int64
        itemsPerPage:
          type: integer
          description: The maximum number of items returned by each status request.
          format: int64
        returned:
          type: integer
          description: The number of the return items by the search.
          format: int64
        total:
          type: integer
          description: The total number of items.
          format: int64
        sort:
          type: string
          description: The field the list is sorted by.
        nextURI:
          type: string
          description: "URI to get the next items in the list, if any."
        prevURI:
          type: string
          description: "URI to get the previous items in the list, if any."
        monitorPageURI:
          type: string
          description: A URI to a page displaying the workflow run live.
      example:
        prevURI: prevURI
        startIndex: 0
        total: 5
        itemsPerPage: 6
        statuses:
        - estimatedEndTime:
          - estimatedEndTime
          - estimatedEndTime
          subApplication: subApplication
          jobJSON: jobJSON
          held: true
          outputURI: outputURI
          description: description
          numberOfRuns: 0
          estimatedStartTime:
          - estimatedStartTime
          - estimatedStartTime
          type: type
          folderId: folderId
          jobId: jobId
          folder: folder
          deleted: true
          application: application
          name: name
          host: host
          startTime: startTime
          endTime: endTime
          orderDate: orderDate
          ctm: ctm
          cyclic: true
          status: status
          logURI: logURI
        - estimatedEndTime:
          - estimatedEndTime
          - estimatedEndTime
          subApplication: subApplication
          jobJSON: jobJSON
          held: true
          outputURI: outputURI
          description: description
          numberOfRuns: 0
          estimatedStartTime:
          - estimatedStartTime
          - estimatedStartTime
          type: type
          folderId: folderId
          jobId: jobId
          folder: folder
          deleted: true
          application: application
          name: name
          host: host
          startTime: startTime
          endTime: endTime
          orderDate: orderDate
          ctm: ctm
          cyclic: true
          status: status
          logURI: logURI
        sort: sort
        returned: 1
        nextURI: nextURI
        monitorPageURI: monitorPageURI
    Log:
      type: object
      properties:
        log:
          type: string
    Output:
      type: object
      properties:
        output:
          type: string
    App:
      type: object
      properties:
        displayname:
          type: string
          description: job type display name
        name:
          type: string
          description: job type name
        desc:
          type: string
          description: description
        defaultType:
          type: string
          description: default type
        lastModified:
          type: string
          description: last modification date
        createdOn:
          type: string
          description: creation date
        createdBy:
          type: string
          description: creation author
      description: App (job type) object for AI deploy api
    AppDeployed:
      type: object
      properties:
        displayname:
          type: string
          description: job type display name
        name:
          type: string
          description: job type name
        version:
          type: string
          description: version
        defaultType:
          type: string
          description: default type
        lastDeployed:
          type: string
          description: last deployment date
        createdOn:
          type: string
          description: creation date
        createdBy:
          type: string
          description: creation author
      description: Deployed app (job type) object for AI deploy api
    AppList:
      type: object
      properties:
        appNames:
          type: array
          items:
            $ref: '#/components/schemas/App'
        deployedNames:
          type: array
          items:
            $ref: '#/components/schemas/AppDeployed'
      description: App list object for AI deploy api
    AppDeployResponse:
      type: object
      properties:
        status:
          type: string
          description: status
        message:
          type: string
          description: message
        agentName:
          type: string
          description: agent name
      description: Deployed App (job type) object response for AI deploy api
    AppPredeployResponse:
      type: object
      properties:
        appName:
          type: string
          description: app name
        readyStatus:
          type: string
          description: ready status
      description: Pre-deployed App (job type) object response for AI deploy api
    AiError:
      type: object
      properties:
        message:
          type: string
          description: Error message
        status:
          type: integer
          description: Http status code
      description: AI standard error object
    AiJobtype:
      type: object
      properties:
        jobTypeName:
          type: string
          description: Jobtype display name
        jobTypeId:
          type: string
          description: Jobtype internal appname
        status:
          type: string
          description: "Jobtype status ['ready to deploy', 'draft']"
        description:
          type: string
          description: Jobtype description
      description: Application integrator jobtype
      example:
        jobTypeName: jobTypeName
        description: description
        jobTypeId: jobTypeId
        status: status
    AiJobtypeList:
      type: object
      properties:
        jobtypes:
          type: array
          items:
            $ref: '#/components/schemas/AiJobtype'
      description: List of application integrator jobtypes
      example:
        jobtypes:
        - jobTypeName: jobTypeName
          description: description
          jobTypeId: jobTypeId
          status: status
        - jobTypeName: jobTypeName
          description: description
          jobTypeId: jobTypeId
          status: status
    AiDeployResponse:
      type: object
      properties:
        message:
          type: string
          description: response message
      description: Response of deploy and pre-deploy AI jobtype
      example:
        message: message
    RulesStatisticListSummary:
      type: object
      properties:
        rulesStatisticList:
          $ref: '#/components/schemas/RulesStatisticList'
        summary:
          $ref: '#/components/schemas/Summary'
      example:
        summary:
          totalNumberOfJobs: 1
          totalDataSize: totalDataSize
          diskUsage: diskUsage
          actualDbSize: actualDbSize
        rulesStatisticList:
          ruleStatistics:
          - retentionType: Years
            oldestItem: oldestItem
            totalJobs: 6
            ruleName: ruleName
            dataSize: dataSize
            newestItem: newestItem
            retention: 0
          - retentionType: Years
            oldestItem: oldestItem
            totalJobs: 6
            ruleName: ruleName
            dataSize: dataSize
            newestItem: newestItem
            retention: 0
    RulesStatisticList:
      type: object
      properties:
        ruleStatistics:
          type: array
          items:
            $ref: '#/components/schemas/RuleStatistics'
      example:
        ruleStatistics:
        - retentionType: Years
          oldestItem: oldestItem
          totalJobs: 6
          ruleName: ruleName
          dataSize: dataSize
          newestItem: newestItem
          retention: 0
        - retentionType: Years
          oldestItem: oldestItem
          totalJobs: 6
          ruleName: ruleName
          dataSize: dataSize
          newestItem: newestItem
          retention: 0
    RuleStatistics:
      type: object
      properties:
        ruleName:
          type: string
        retention:
          type: integer
        retentionType:
          type: string
          enum:
          - Years
          - Months
          - Days
        oldestItem:
          type: string
        newestItem:
          type: string
        totalJobs:
          type: integer
        dataSize:
          type: string
      example:
        retentionType: Years
        oldestItem: oldestItem
        totalJobs: 6
        ruleName: ruleName
        dataSize: dataSize
        newestItem: newestItem
        retention: 0
    Summary:
      type: object
      properties:
        totalNumberOfJobs:
          type: integer
        totalDataSize:
          type: string
        actualDbSize:
          type: string
        diskUsage:
          type: string
      example:
        totalNumberOfJobs: 1
        totalDataSize: totalDataSize
        diskUsage: diskUsage
        actualDbSize: actualDbSize
    ArchiveRulesList:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveRule'
      example:
        rules:
        - retentionType: retentionType
          archivedType: archivedType
          maxOutputSize: maxOutputSize
          name: name
          description: description
          maxOutputSizeType: maxOutputSizeType
          isActive: isActive
          ruleParameters:
          - field: field
            criteria: criteria
            exceptions:
            - exceptions
            - exceptions
          - field: field
            criteria: criteria
            exceptions:
            - exceptions
            - exceptions
          retention: retention
          trimType: trimType
        - retentionType: retentionType
          archivedType: archivedType
          maxOutputSize: maxOutputSize
          name: name
          description: description
          maxOutputSizeType: maxOutputSizeType
          isActive: isActive
          ruleParameters:
          - field: field
            criteria: criteria
            exceptions:
            - exceptions
            - exceptions
          - field: field
            criteria: criteria
            exceptions:
            - exceptions
            - exceptions
          retention: retention
          trimType: trimType
      xml:
        name: Rules
    ArchiveRule:
      type: object
      properties:
        name:
          type: string
          description: The Control-M Workload Archiving rule name. REQUIRED. HIDDEN.
        description:
          type: string
          description: The description of Control-M Workload Archiving rule. HIDDEN.
        maxOutputSize:
          type: string
          description: The maximum job's output size to collect. HIDDEN.
          xml:
            attribute: true
        maxOutputSizeType:
          type: string
          description: The maximum job's output size type to collect - KB or MB. The
            default is MB. HIDDEN.
          xml:
            attribute: true
        trimType:
          type: string
          description: "Trim in case the output exceed the maximum job's output -\
            \ Omit , Beginning, End. The default is to Omit. HIDDEN."
          xml:
            attribute: true
        retention:
          type: string
          description: The retention period to keep archive job by rule. The default
            is 1. HIDDEN.
        retentionType:
          type: string
          description: "The retention period type to keep archive job by rule- Years,\
            \ Months and Days are available. The default is Years. HIDDEN."
        isActive:
          type: string
          description: Is Control-M Workload Archiving rule is active. HIDDEN.
        archivedType:
          type: string
          description: "The rule archived data - logs, output or both. The default\
            \ is both. HIDDEN."
        ruleParameters:
          type: array
          description: "Rule parameters - ctm, type, jobName, jobType, application,\
            \ subApplication, jobStatus, folder and library. HIDDEN."
          items:
            $ref: '#/components/schemas/RuleCriteria'
      example:
        retentionType: retentionType
        archivedType: archivedType
        maxOutputSize: maxOutputSize
        name: name
        description: description
        maxOutputSizeType: maxOutputSizeType
        isActive: isActive
        ruleParameters:
        - field: field
          criteria: criteria
          exceptions:
          - exceptions
          - exceptions
        - field: field
          criteria: criteria
          exceptions:
          - exceptions
          - exceptions
        retention: retention
        trimType: trimType
    RuleCriteria:
      type: object
      properties:
        field:
          type: string
          description: "Rule parameters fields can be one of the options - ctm, type,\
            \ jobName, jobType, application, subApplication, jobStatus, folder and\
            \ library. HIDDEN."
        criteria:
          type: string
        exceptions:
          type: array
          items:
            type: string
      example:
        field: field
        criteria: criteria
        exceptions:
        - exceptions
        - exceptions
    ConnectionProfilesStatusResult:
      type: object
      properties:
        statuses:
          type: array
          description: The list of statuses tracked by the given runId.
          items:
            $ref: '#/components/schemas/ConnectionProfileStatus'
        returned:
          type: integer
          description: The number of the return items by the search.
          format: int64
        total:
          type: integer
          description: The total number of items.
          format: int64
      example:
        total: 6
        statuses:
        - name: name
          creatorName: creatorName
          description: description
          timeCreated: timeCreated
          modifierName: modifierName
          type: type
          timeModified: timeModified
          syncStatus: syncStatus
        - name: name
          creatorName: creatorName
          description: description
          timeCreated: timeCreated
          modifierName: modifierName
          type: type
          timeModified: timeModified
          syncStatus: syncStatus
        returned: 0
    ConnectionProfileStatus:
      type: object
      properties:
        name:
          type: string
          description: connection profile name
        type:
          type: string
          description: connection profile type
        description:
          type: string
          description: connection profile description
        timeModified:
          type: string
          description: UTC date of the modification
        timeCreated:
          type: string
          description: UTC date of the creation
        creatorName:
          type: string
          description: creator's name
        modifierName:
          type: string
          description: modifier's name
        syncStatus:
          type: string
          description: Status calculated by the server according to the list of statuses
            with each server
      example:
        name: name
        creatorName: creatorName
        description: description
        timeCreated: timeCreated
        modifierName: modifierName
        type: type
        timeModified: timeModified
        syncStatus: syncStatus
    ConnectionProfilesDeploymentStatusResult:
      type: object
      properties:
        deploymentStatus:
          type: string
          description: Deployment status calculated by the server according to the
            list of statuses with each Control-M/Server
        deploymentInfo:
          type: array
          description: The detailed deployment status per Control-M/Server
          items:
            $ref: '#/components/schemas/ConnectionProfileDeploymentInfo'
      example:
        deploymentStatus: deploymentStatus
        deploymentInfo:
        - ctmName: ctmName
          lastUpdate: lastUpdate
          message: message
          status: status
          statusCode: 0
        - ctmName: ctmName
          lastUpdate: lastUpdate
          message: message
          status: status
          statusCode: 0
    ConnectionProfileDeploymentInfo:
      type: object
      properties:
        ctmName:
          type: string
          description: The logical name of Control-M/Server
        status:
          type: string
          description: The deployment status of connection profile
        statusCode:
          type: integer
          description: The deployment status code of connection profile
        lastUpdate:
          type: string
          description: UTC date of the modification
        message:
          type: string
          description: Status information
      example:
        ctmName: ctmName
        lastUpdate: lastUpdate
        message: message
        status: status
        statusCode: 0
    LoginCredentials:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    LoginResult:
      type: object
      properties:
        username:
          type: string
        token:
          type: string
          format: password
        version:
          type: string
      example:
        version: version
        username: username
        token: ""
    PasswordsObject:
      type: object
      properties:
        user:
          type: string
          description: user name HIDDEN
        currentPassword:
          type: string
          description: current password
          format: password
          x-prompt: Current password
        newPassword:
          type: string
          description: new password
          format: password
          x-prompt: New password
    ActiveServices:
      type: object
      properties:
        serviceLastUpdatedTime:
          type: string
        activeServices:
          type: array
          items:
            $ref: '#/components/schemas/SLAService'
      example:
        serviceLastUpdatedTime: serviceLastUpdatedTime
        activeServices:
        - note: note
          totalJobs: totalJobs
          slackTime: slackTime
          serviceControlM: serviceControlM
          serviceName: serviceName
          dueTime: dueTime
          priority: priority
          scheduledOrderDate: scheduledOrderDate
          jobsCompleted: jobsCompleted
          completionPercentage: completionPercentage
          serviceOrderDateTime: serviceOrderDateTime
          statusReason: statusReason
          serviceJob: serviceJob
          statusByJobs:
            waitResource: waitResource
            waitUser: waitUser
            waitCondition: waitCondition
            waitHost: waitHost
            executed: executed
            waitWorkload: waitWorkload
            completed: completed
            error: error
            unknown: unknown
          startTime: startTime
          endTime: endTime
          averageCompletionTime: averageCompletionTime
          jobsWithoutStatistics: jobsWithoutStatistics
          errors: errors
          status: status
        - note: note
          totalJobs: totalJobs
          slackTime: slackTime
          serviceControlM: serviceControlM
          serviceName: serviceName
          dueTime: dueTime
          priority: priority
          scheduledOrderDate: scheduledOrderDate
          jobsCompleted: jobsCompleted
          completionPercentage: completionPercentage
          serviceOrderDateTime: serviceOrderDateTime
          statusReason: statusReason
          serviceJob: serviceJob
          statusByJobs:
            waitResource: waitResource
            waitUser: waitUser
            waitCondition: waitCondition
            waitHost: waitHost
            executed: executed
            waitWorkload: waitWorkload
            completed: completed
            error: error
            unknown: unknown
          startTime: startTime
          endTime: endTime
          averageCompletionTime: averageCompletionTime
          jobsWithoutStatistics: jobsWithoutStatistics
          errors: errors
          status: status
    SLAService:
      type: object
      properties:
        serviceName:
          type: string
          description: Service Name
        status:
          type: string
          description: Status Code
        statusReason:
          type: string
          description: Status Reason
        startTime:
          type: string
          description: Start Time
        endTime:
          type: string
          description: End Time
        dueTime:
          type: string
          description: Due Time
        slackTime:
          type: string
          description: Slack Time
        serviceOrderDateTime:
          type: string
          description: Service Order DateTime
        scheduledOrderDate:
          type: string
          description: Control-M Order Date
        serviceJob:
          type: string
          description: Service Key
        serviceControlM:
          type: string
          description: Service Control-M
        priority:
          type: string
          description: Priority
        note:
          type: string
          description: User note
        totalJobs:
          type: string
          description: Number of Jobs
        jobsCompleted:
          type: string
          description: Jobs Completed
        jobsWithoutStatistics:
          type: string
          description: Jobs without statistics
        completionPercentage:
          type: string
          description: Completion Percentage
        averageCompletionTime:
          type: string
          description: Average Completion Time
        errors:
          type: string
          description: Error details
        statusByJobs:
          $ref: '#/components/schemas/SLAServiceStatusByJobs'
      example:
        note: note
        totalJobs: totalJobs
        slackTime: slackTime
        serviceControlM: serviceControlM
        serviceName: serviceName
        dueTime: dueTime
        priority: priority
        scheduledOrderDate: scheduledOrderDate
        jobsCompleted: jobsCompleted
        completionPercentage: completionPercentage
        serviceOrderDateTime: serviceOrderDateTime
        statusReason: statusReason
        serviceJob: serviceJob
        statusByJobs:
          waitResource: waitResource
          waitUser: waitUser
          waitCondition: waitCondition
          waitHost: waitHost
          executed: executed
          waitWorkload: waitWorkload
          completed: completed
          error: error
          unknown: unknown
        startTime: startTime
        endTime: endTime
        averageCompletionTime: averageCompletionTime
        jobsWithoutStatistics: jobsWithoutStatistics
        errors: errors
        status: status
    SLAServiceStatusByJobs:
      type: object
      properties:
        executed:
          type: string
          description: Executed
        waitCondition:
          type: string
          description: Wait Condition
        waitResource:
          type: string
          description: Wait Resource
        waitUser:
          type: string
          description: Wait User
        waitHost:
          type: string
          description: Wait Host
        waitWorkload:
          type: string
          description: Wait Workload
        completed:
          type: string
          description: Completed
        error:
          type: string
          description: Error
        unknown:
          type: string
          description: Unkwown
      example:
        waitResource: waitResource
        waitUser: waitUser
        waitCondition: waitCondition
        waitHost: waitHost
        executed: executed
        waitWorkload: waitWorkload
        completed: completed
        error: error
        unknown: unknown
    Event:
      type: object
      properties:
        name:
          type: string
          description: Event name
        ctm:
          type: string
          description: Control-M Server hosting the event
        date:
          type: string
          description: "The event date, either date in format dd/mm/yy or a string\
            \ \"orderdate\""
          format: string
      example:
        date: date
        name: name
        ctm: ctm
    EventParam:
      required:
      - date
      - name
      type: object
      properties:
        name:
          type: string
        date:
          type: string
    EventSet:
      type: array
      items:
        $ref: '#/components/schemas/Event'
      x-schema-name: EventSet
    LogParams:
      type: object
      properties:
        ctm:
          type: string
          description: The name of the Control-M server in which the job was ordered
            from. HIDDEN.
        orderId:
          type: string
          description: Job's order id. HIDDEN.
        numberOfRuns:
          type: integer
          description: Job's rerun number. HIDDEN.
        logTable:
          type: string
          description: "Job's log table name, accepted as a value in search request.\
            \ HIDDEN."
    NewSample:
      required:
      - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    OrderFolderParameters:
      type: object
      properties:
        ctm:
          type: string
          description: The Control-M Server to order from. REQUIRED.
        folder:
          type: string
          description: The folder to order. REQUIRED.
        jobs:
          type: string
          description: Filter the jobs to order.
        library:
          type: string
          description: The z/os library that contains the job (only for MF).
        createDuplicate:
          type: boolean
          description: Is it allowed to order the same jobs more than once to the
            same SMART folder. HIDDEN.
        hold:
          type: boolean
          description: Are jobs ordered in a HOLD state. HIDDEN.
        ignoreCriteria:
          type: boolean
          description: Is scheduling criteria to be ignored. HIDDEN.
        independentFlow:
          type: boolean
          description: Whether to generate new flow in this order. HIDDEN.
        orderDate:
          type: string
          description: The order date that is attached to this order command. HIDDEN.
        orderIntoFolder:
          type: string
          description: Policy for placing the jobs in a SMART folder. HIDDEN.
        waitForOrderDate:
          type: boolean
          description: Whether to wait for the order date when running the jobs. HIDDEN.
        variables:
          type: array
          description: Job Variables for this run. HIDDEN.
          items:
            type: object
            additionalProperties:
              type: string
            example:
              arg: string
              arg2: string
              arg3: string
    OutputParams:
      type: object
      properties:
        ctm:
          type: string
          description: The name of the Control-M server in which the job was ordered
            from. HIDDEN.
        orderId:
          type: string
          description: Job's order id. HIDDEN.
        numberOfRuns:
          type: integer
          description: Job's rerun number. HIDDEN.
        outputTable:
          type: string
          description: "Job's output table name, accepted as a value in search request.\
            \ HIDDEN."
    ProvisionAdvanceParameters:
      type: object
      properties:
        connectionInitiator:
          type: string
          description: "Which component is allowed to initiate the connection [ServerToAgent\
            \ | AgentToServer | BothAllowed]. Parameters start with capital letter.\
            \  HIDDEN."
        tag:
          type: string
          description: Logical name that is used to label specific Control-M/Agents
            into a group with a specific authorization level.  HIDDEN.
        serverHostName:
          type: string
          description: Control-M/Server name (in case it has an alias or multiple
            network interfaces).  HIDDEN.
        serverPort:
          type: integer
          description: Control-M/Server port to communicate with the agent.  HIDDEN.
          format: int32
    ResourceMax:
      required:
      - max
      type: object
      properties:
        max:
          type: integer
          format: int32
    ResourceObj:
      type: object
      properties:
        name:
          type: string
          description: Resource name
        ctm:
          type: string
          description: Control-M Server hosting the resource
        available:
          type: string
          description: The resource q current quantity.
        max:
          type: integer
          description: The resource q max usage value.
          format: int32
        workloadPolicy:
          type: string
          description: Workload Policy.
      example:
        max: 0
        name: name
        available: available
        ctm: ctm
        workloadPolicy: workloadPolicy
    ResourceParam:
      required:
      - max
      - name
      type: object
      properties:
        name:
          type: string
        max:
          type: string
    ResourceSet:
      type: array
      items:
        $ref: '#/components/schemas/ResourceObj'
      x-schema-name: ResourceSet
    ReportResult:
      required:
      - reportURL
      type: object
      properties:
        reportURL:
          type: string
          description: A URL to the report.
      example:
        reportURL: reportURL
    RunReport:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: jobDef
        format:
          type: string
          example: CSV
        filters:
          $ref: '#/components/schemas/ReportFilters'
        dateTimeSettings:
          $ref: '#/components/schemas/ReportDateTimeSettings'
      example:
        dateTimeSettings:
          dateTimeFormat: dateTimeFormat
          dateFormat: dateFormat
          timeFormat: timeFormat
        name: jobDef
        format: CSV
        filters:
        - name: name
          value: value
        - name: name
          value: value
    ReportDateTimeSettings:
      type: object
      properties:
        dateFormat:
          type: string
        timeFormat:
          type: string
        dateTimeFormat:
          type: string
      example:
        dateTimeFormat: dateTimeFormat
        dateFormat: dateFormat
        timeFormat: timeFormat
    ReportFilters:
      type: array
      items:
        $ref: '#/components/schemas/ReportFilter'
      x-schema-name: ReportFilters
    ReportFilter:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      example:
        name: name
        value: value
    RunReportInfo:
      type: object
      properties:
        reportId:
          type: string
          example: 97aa4d17-c6d3-4e7d-94f7-b55dd4e04eaa
        name:
          type: string
          example: jobDef
        format:
          type: string
          example: CSV
        status:
          type: string
          example: Pending
        url:
          type: string
        webUrl:
          type: string
      example:
        reportId: 97aa4d17-c6d3-4e7d-94f7-b55dd4e04eaa
        webUrl: webUrl
        name: jobDef
        format: CSV
        url: url
        status: Pending
    RunResult:
      required:
      - runId
      type: object
      properties:
        runId:
          type: string
          description: An ID that identifies running jobs and can be used to track
            their status.
        statusURI:
          type: string
          description: A URI that can be used to get the status of the run jobs.
        monitorPageURI:
          type: string
          description: A URI to a page displaying the workflow run live.
      example:
        statusURI: statusURI
        runId: runId
        monitorPageURI: monitorPageURI
    FieldValues:
      required:
      - values
      type: object
      properties:
        values:
          $ref: '#/components/schemas/Values'
    Values:
      type: array
      items:
        $ref: '#/components/schemas/FieldValue'
      x-schema-name: Values
    FieldValue:
      required:
      - value
      type: object
      properties:
        value:
          type: string
        description:
          type: string
    Sample:
      required:
      - id
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
    SearchParams:
      type: object
      properties:
        ctm:
          type: string
          description: The name of sthe Control-M server in which the job was ordered
            from. HIDDEN.
        jobName:
          type: string
          description: The name of the job. HIDDEN.
        app:
          type: string
          description: The name of the application the jobs belong to. HIDDEN.
        subApp:
          type: string
          description: The name of the sub-application the jobs belong to. HIDDEN.
        folder:
          type: string
          description: The name of the parent folder. HIDDEN.
        status:
          type: string
          description: The job's end status. HIDDEN.
          enum:
          - OK
          - NOTOK
          - ALL
        lib:
          type: string
          description: The job's library name. HIDDEN.
        limit:
          type: integer
          description: Maximum archived Jobs to display. HIDDEN.
        logContains:
          type: string
          description: Job log must contain the given phrase. HIDDEN.
        outputContains:
          type: string
          description: Job output must contain the given phrase. HIDDEN.
        memLib:
          type: string
          description: Member's library. HIDDEN.
        memName:
          type: string
          description: Member name. HIDDEN.
        nodeGroup:
          type: string
          description: Job's node group. HIDDEN.
        nodeId:
          type: string
          description: Job's node id (agent). HIDDEN.
        fromOrderDate:
          type: string
          description: Indicating a date by which will look for jobs that their order
            date started afterwards. Date format - YYYY-MM-DD. HIDDEN.
        toOrderDate:
          type: string
          description: Indicating a date by which will look for jobs that their order
            date ended before. Date format - YYYY-MM-DD. HIDDEN.
        orderId:
          type: string
          description: Job's order id. HIDDEN.
        runAs:
          type: string
          description: Runs as (username on agent machine). HIDDEN.
        startDate:
          type: string
          description: Job execution start date. Date format - YYYY-MM-DD. HIDDEN.
        endDate:
          type: string
          description: Job execution end date. Date format - YYYY-MM-DD. HIDDEN.
    UpgradeAgentInfo:
      type: object
      properties:
        agent:
          type: string
          description: Agent name.
        ctm:
          type: string
          description: Control-M name.
        type:
          type: string
          description: "Agent type (Agent, MFT, AppPack)."
        platform:
          type: string
          description: Platform.
        fromVersion:
          type: string
          description: From version.
        toVersion:
          type: string
          description: To version.
      example:
        agent: agent
        fromVersion: fromVersion
        type: type
        ctm: ctm
        platform: platform
        toVersion: toVersion
    UpgradeAgentInfoList:
      type: array
      description: List of all agents for upgrade.
      items:
        $ref: '#/components/schemas/UpgradeAgentInfo'
      x-schema-name: UpgradeAgentInfoList
    UpgradeRequest:
      type: object
      properties:
        ctm:
          type: string
          description: Control-M name. REQUIRED
        agent:
          type: string
          description: Agent name. REQUIRED
        type:
          type: string
          description: "Product type (Agent, MFT, AppPack). REQUIRED"
        version:
          type: string
          description: Target version to be installed or version that should be rollback
            REQUIRED
        activityName:
          type: string
          description: Name of activity
        installUser:
          type: string
          description: "User that will install, upgrade or uninstall HIDDEN"
        notifyAddress:
          type: string
          description: List of email addresses separated by semicolon HIDDEN
        description:
          type: string
          description: Description of activity HIDDEN
    UpgradeResponse:
      type: object
      properties:
        upgradeId:
          type: string
          description: ID of upgrade activity
      example:
        upgradeId: upgradeId
    UpgradeInfo:
      type: object
      properties:
        type:
          type: string
          description: "product type (Agent, MFT, AppPack)."
        version:
          type: string
          description: upgrade version
      example:
        type: type
        version: version
    UpgradeRecordList:
      type: object
      properties:
        upgradeRecords:
          type: array
          items:
            $ref: '#/components/schemas/UpgradeRecord'
      example:
        upgradeRecords:
        - agent: agent
          installUser: installUser
          package: package
          fromVersion: fromVersion
          activity: activity
          creationTime: creationTime
          transferEndTime: transferEndTime
          activityName: activityName
          description: description
          message: message
          upgradeId: upgradeId
          toVersion: toVersion
          transferStartTime: transferStartTime
          ctm: ctm
          installEndTime: installEndTime
          notifyAddress: notifyAddress
          installStartTime: installStartTime
          status: status
        - agent: agent
          installUser: installUser
          package: package
          fromVersion: fromVersion
          activity: activity
          creationTime: creationTime
          transferEndTime: transferEndTime
          activityName: activityName
          description: description
          message: message
          upgradeId: upgradeId
          toVersion: toVersion
          transferStartTime: transferStartTime
          ctm: ctm
          installEndTime: installEndTime
          notifyAddress: notifyAddress
          installStartTime: installStartTime
          status: status
    UpgradeRecord:
      type: object
      properties:
        upgradeId:
          type: string
          description: upgrade id
        ctm:
          type: string
          description: Control-M name
        agent:
          type: string
          description: agnet name
        package:
          type: string
          description: upgrade package type
        fromVersion:
          type: string
          description: upgrade from version
        toVersion:
          type: string
          description: upgrade to version
        activity:
          type: string
          description: "activity type (Transfer, Install, Rollback)"
        status:
          type: string
          description: "status tyoe (Cancel, Running Complete,TransferCompleted, Failed,Unavailable)"
        message:
          type: string
          description: massage
        creationTime:
          type: string
          description: creation time
        transferStartTime:
          type: string
          description: transfer start time
        transferEndTime:
          type: string
          description: transfer end time
        installStartTime:
          type: string
          description: installation start time
        installEndTime:
          type: string
          description: installation end time
        activityName:
          type: string
          description: activity name
        installUser:
          type: string
          description: install user
        notifyAddress:
          type: string
          description: notify address
        description:
          type: string
          description: description
      example:
        agent: agent
        installUser: installUser
        package: package
        fromVersion: fromVersion
        activity: activity
        creationTime: creationTime
        transferEndTime: transferEndTime
        activityName: activityName
        description: description
        message: message
        upgradeId: upgradeId
        toVersion: toVersion
        transferStartTime: transferStartTime
        ctm: ctm
        installEndTime: installEndTime
        notifyAddress: notifyAddress
        installStartTime: installStartTime
        status: status
    WorkloadPolicy:
      type: object
      properties:
        name:
          type: string
          description: unique workload policy name
        state:
          type: string
          description: workload policy state
        orderNo:
          type: string
          description: workload policy order number
        lastUpdate:
          type: string
          description: workload policy update date
        updatedBy:
          type: string
          description: user which updated workload policy
        description:
          type: string
          description: workload policy description
      example:
        orderNo: orderNo
        updatedBy: updatedBy
        lastUpdate: lastUpdate
        name: name
        description: description
        state: state
    WorkloadPolicyList:
      type: object
      properties:
        workloadPolicies:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadPolicy'
      example:
        workloadPolicies:
        - orderNo: orderNo
          updatedBy: updatedBy
          lastUpdate: lastUpdate
          name: name
          description: description
          state: state
        - orderNo: orderNo
          updatedBy: updatedBy
          lastUpdate: lastUpdate
          name: name
          description: description
          state: state
    WorkloadPolicyState:
      type: object
      properties:
        name:
          type: string
          description: unique workload policy name
        state:
          type: string
          description: workload policy state
      example:
        name: name
        state: state
    WorkloadPolicyStateList:
      type: object
      properties:
        workloadPolicies:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadPolicyState'
      example:
        workloadPolicies:
        - name: name
          state: state
        - name: name
          state: state
    StatisticsSingleRun:
      type: object
      properties:
        startTime:
          type: string
          description: job run start time
        endTime:
          type: string
          description: job run end time
        cpuTime:
          type: string
          description: job run CPU time
        runTime:
          type: string
          description: jobs run time
        jobId:
          type: string
          description: run job id
        orderDate:
          type: string
          description: job order date
      example:
        jobId: jobId
        cpuTime: cpuTime
        startTime: startTime
        endTime: endTime
        runTime: runTime
        orderDate: orderDate
    Statistics:
      type: object
      properties:
        currentPeriod:
          type: string
          description: Statistics calendar period
        calendarControlm:
          type: string
          description: Statistics calendar Control-M
        calendarName:
          type: string
          description: Statistics calendar name
        periods:
          type: array
          items:
            $ref: '#/components/schemas/StatisticsPeriod'
      example:
        calendarName: calendarName
        calendarControlm: calendarControlm
        periods:
        - runInfo:
            averageInfo:
              cpuTime: cpuTime
              startTime: startTime
              runTime: runTime
            runs:
            - jobId: jobId
              cpuTime: cpuTime
              startTime: startTime
              endTime: endTime
              runTime: runTime
              orderDate: orderDate
            - jobId: jobId
              cpuTime: cpuTime
              startTime: startTime
              endTime: endTime
              runTime: runTime
              orderDate: orderDate
          periodTag: periodTag
        - runInfo:
            averageInfo:
              cpuTime: cpuTime
              startTime: startTime
              runTime: runTime
            runs:
            - jobId: jobId
              cpuTime: cpuTime
              startTime: startTime
              endTime: endTime
              runTime: runTime
              orderDate: orderDate
            - jobId: jobId
              cpuTime: cpuTime
              startTime: startTime
              endTime: endTime
              runTime: runTime
              orderDate: orderDate
          periodTag: periodTag
        currentPeriod: currentPeriod
    StatisticsAverageInfo:
      type: object
      properties:
        startTime:
          type: string
          description: Average start time
        cpuTime:
          type: string
          description: Average CPU time
        runTime:
          type: string
          description: Average time
      example:
        cpuTime: cpuTime
        startTime: startTime
        runTime: runTime
    StatisticsRunInfo:
      type: object
      properties:
        averageInfo:
          $ref: '#/components/schemas/StatisticsAverageInfo'
        runs:
          type: array
          items:
            $ref: '#/components/schemas/StatisticsSingleRun'
      example:
        averageInfo:
          cpuTime: cpuTime
          startTime: startTime
          runTime: runTime
        runs:
        - jobId: jobId
          cpuTime: cpuTime
          startTime: startTime
          endTime: endTime
          runTime: runTime
          orderDate: orderDate
        - jobId: jobId
          cpuTime: cpuTime
          startTime: startTime
          endTime: endTime
          runTime: runTime
          orderDate: orderDate
    StatisticsPeriod:
      type: object
      properties:
        periodTag:
          type: string
          description: Period tag
        runInfo:
          $ref: '#/components/schemas/StatisticsRunInfo'
      example:
        runInfo:
          averageInfo:
            cpuTime: cpuTime
            startTime: startTime
            runTime: runTime
          runs:
          - jobId: jobId
            cpuTime: cpuTime
            startTime: startTime
            endTime: endTime
            runTime: runTime
            orderDate: orderDate
          - jobId: jobId
            cpuTime: cpuTime
            startTime: startTime
            endTime: endTime
            runTime: runTime
            orderDate: orderDate
        periodTag: periodTag
    RerunParameters:
      type: object
      properties:
        zosParameters:
          $ref: '#/components/schemas/RerunZosParameters'
    RerunZosParameters:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/RestartStep'
        to:
          $ref: '#/components/schemas/RestartStep'
        cleanup:
          type: boolean
          description: cleanup instead of running specific steps. HIDDEN.
        recaptureAbend:
          type: string
          description: TO BE ADDED. HIDDEN.
        recaptureConditionCode:
          type: string
          description: TO BE ADDED. HIDDEN.
        stepAdjustment:
          type: boolean
          description: TO BE ADDED. HIDDEN.
        restartParmMemberName:
          type: string
          description: TO BE ADDED. HIDDEN.
    RestartStep:
      type: object
      properties:
        pgm:
          type: string
          description: program step
        proc:
          type: string
          description: proc step
    JobtypeAgent:
      type: object
      properties:
        server:
          type: string
          description: Server name
        agent:
          type: string
          description: Agent name
      description: Specifications of an agent
      example:
        server: server
        agent: agent
    DeployJobtypeResponse:
      type: object
      properties:
        deploymentFile:
          type: string
          description: The name of the deployed .ctmai file
        successfulDeploys:
          type: array
          items:
            $ref: '#/components/schemas/JobtypeAgent'
      description: Response of deployed jobtype
      example:
        deploymentFile: deploymentFile
        successfulDeploys:
        - server: server
          agent: agent
        - server: server
          agent: agent
    AlertParam:
      required:
      - alertIds
      type: object
      properties:
        alertIds:
          type: array
          description: alertIds. HIDDEN.
          items:
            type: integer
        urgency:
          type: string
          description: modify urgency. HIDDEN.
          enum:
          - Normal
          - Urgent
          - Critical
        comment:
          type: string
          description: modify comment. HIDDEN.
    AlertStatusParam:
      required:
      - alertIds
      type: object
      properties:
        alertIds:
          type: array
          description: alertIds. HIDDEN.
          items:
            type: integer
        status:
          type: string
          description: modify status. HIDDEN.
          enum:
          - Undefined
          - Reviewed
          - Closed
          - New
    GetAlertInfo:
      type: object
      properties:
        id:
          type: integer
        notes:
          type: string
        severity:
          type: string
        status:
          type: string
    ApiGtwSession:
      title: ApiGtwSession
      type: object
      properties:
        session_id:
          type: string
    RequestParametersWrapperEMDefaultRequestParametersWhyJobParameter':
      title: "RequestParametersWrapper«EMDefaultRequestParameters,WhyJobParameters»"
      type: object
      properties:
        ctm_parameters:
          $ref: '#/components/schemas/WhyJobParameters'
        em_parameters:
          $ref: '#/components/schemas/EMDefaultRequestParameters'
    RequestParametersWrapperEMDefaultRequestParametersLogJobParameters:
      title: "RequestParametersWrapper«EMDefaultRequestParameters,LogJobParameters»"
      type: object
      properties:
        ctm_parameters:
          $ref: '#/components/schemas/LogJobParameters'
        em_parameters:
          $ref: '#/components/schemas/EMDefaultRequestParameters'
    LogJobParameters:
      title: LogJobParameters
      type: object
      properties:
        from_rerun_count:
          type: string
        order_id:
          type: string
        to_rerun_count:
          type: string
    LogJobResultItem:
      title: LogJobResultItem
      type: object
      properties:
        data_arguments:
          type: array
          items:
            $ref: '#/components/schemas/logDataArguments'
        formatted_message:
          type: string
        full_line:
          type: string
        local_timestamp_iso8601:
          type: string
        message:
          type: string
        message_code:
          type: string
    LogJobResults:
      title: LogJobResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/LogJobResultItem'
        to:
          type: integer
          format: int64
    logDataArguments:
      title: logDataArguments
      type: object
      properties:
        value_str:
          type: string
    WhyJobParameters:
      title: WhyJobParameters
      type: object
      properties:
        order_id:
          type: string
    WhyJobResultItem:
      title: WhyJobResultItem
      type: object
      properties:
        line:
          type: string
    WhyJobResults:
      title: WhyJobResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/WhyJobResultItem'
        to:
          type: integer
          format: int64
    EMDefaultRequestParameters:
      title: EMDefaultRequestParameters
      type: object
      properties:
        annotation_category:
          type: string
        annotation_notes:
          type: string
        ctm_name:
          type: string
        net_name:
          type: string
    AddAgentParams:
      required:
      - host
      - port
      type: object
      properties:
        host:
          type: string
          description: The hostname or alias of the agent machine.
        port:
          type: integer
          description: The agent's listening port.
          format: int32
        tag:
          type: string
          description: The agent's tag.
        sslState:
          type: string
          description: The agent's ssl State. HIDDEN.
        persistentConnection:
          type: boolean
          description: Is the connection persistent or create each time it is needed.
            HIDDEN.
        timeout:
          type: integer
          description: maximum time in seconds to wait (default 60). HIDDEN
          format: int32
          default: 60
        suppressPing:
          type: boolean
          description: Suppress ping action to added agent (default false). HIDDEN.
          default: false
    SetAgentParams:
      type: object
      properties:
        name:
          type: string
          description: parameter name
        value:
          type: string
          description: parameter value
        type:
          type: string
          description: parameter type
    GetManifestParamsResult:
      type: array
      items:
        $ref: '#/components/schemas/GetManifestParams'
    GetManifestParams:
      type: object
      properties:
        category:
          type: string
          description: Holds the category of the entry
        order:
          type: integer
          description: Order of appearance
        productCode:
          type: string
          description: Three letters that are the product unique identifier
        name:
          type: string
          description: The full official name of the product
        installUri:
          type: string
          description: Specifies the path to the installation file
        visible:
          type: boolean
          description: Determines whether or not the product should be visible in
            the web page
        iconBase64:
          type: string
          description: Base64 representaion of image file
        error:
          type: string
          description: Description of the specific error
        errorCode:
          type: string
          description: Http response status code
        fullName:
          type: string
          description: The full name
        shortName:
          type: string
          description: The short name
        keywords:
          type: array
          description: List of words that user can use when searching for a plugin
          items:
            type: string
        versions:
          type: array
          description: Includes all the versions numbers of the product that exist
            in the repository
          items:
            type: string
        group:
          $ref: '#/components/schemas/ManifestGroupObject'
    ManifestGroupObject:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/ManifestGroupItemObject'
    ManifestGroupItemObject:
      type: object
      properties:
        name:
          type: string
        iconBase64:
          type: string
    ProductSections:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/ProductDescription'
        productDescriptionUrl:
          type: string
          description: The product description. HIDDEN
    ProductDescription:
      type: object
      properties:
        productName:
          type: string
          description: The product name.
        productDescription:
          type: string
          description: The product description.
        isSectionOpen:
          type: boolean
          description: is Section open.
        staticText:
          type: boolean
          description: is static text section.
        tokenComponent:
          type: boolean
          description: is token component added.
    SetAgentParamsList:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/SetAgentParams'
    AddRemoteHostParams:
      type: object
      properties:
        remotehost:
          type: string
          description: The remote host (name) which will execute the commands. REQUIRED.
        port:
          type: integer
          description: The remote host SSH port.
          format: int32
        encryptAlgorithm:
          type: string
          description: The SSH encrypt algorithm to be used. HIDDEN.
        compression:
          type: boolean
          description: Is compression used. HIDDEN.
        authorize:
          type: boolean
          description: authorize SSL remote host while creating the remote host. HIDDEN.
        agents:
          type: array
          description: Agents to execute the commands on. HIDDEN.
          items:
            type: string
      example:
        remotehost: remotehost
        port: 0
        encryptAlgorithm: encryptAlgorithm
        compression: true
        authorize: true
        agents:
        - agents
        - agents
    AddServerParams:
      required:
      - ctm
      - host
      - id
      type: object
      properties:
        host:
          type: string
          description: The Control-M Server host name.
        ctm:
          type: string
          description: The Control-M Server name.
        id:
          type: string
          description: "The id of the Control-M Server, 3 digits id"
        port:
          type: integer
          description: The Control-M Server port number.
          format: int32
    AgentData:
      type: object
      properties:
        name:
          type: string
          description: The Agent name
        host:
          type: string
          description: The Agent host
        nodeID:
          type: string
          description: The Agent nodeID
        ctm:
          type: string
          description: The Control-M name
        ctmHost:
          type: string
          description: The Control-M Host
        currentState:
          type: string
          description: The Agent current state
        status:
          type: string
          description: The Agent status
        statusMessage:
          type: string
          description: The Agent status message
        operatingSystem:
          type: string
          description: The Agent operating System
        platform:
          type: string
          description: The Agent platform
        version:
          type: string
          description: The Agent version
        lastUpdate:
          type: string
          description: The Agent last update
        communicationVersion:
          type: string
          description: The Agent communication version
        tag:
          type: string
          description: The Agent tag
        sslState:
          type: string
          description: The Agent ssl state
        hostGroups:
          type: string
          description: The Agent host groups
        plugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginData'
    AgentDetails:
      type: object
      properties:
        nodeid:
          type: string
          description: agent machine
        status:
          type: string
          description: agent status
        hostgroups:
          type: array
          description: list of hostgroups names containing the agent
          items:
            type: string
        version:
          type: string
          description: agent version string i.e. - 9.0.20.080
        operatingSystem:
          type: string
          description: agent operating system long name i.e - Microsoft Windows Server
            2016  (Build 14393)
      example:
        hostgroups:
        - hostgroups
        - hostgroups
        nodeid: nodeid
        version: version
        operatingSystem: operatingSystem
        status: status
    AgentDetailsList:
      type: object
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/AgentDetails'
      example:
        agents:
        - hostgroups:
          - hostgroups
          - hostgroups
          nodeid: nodeid
          version: version
          operatingSystem: operatingSystem
          status: status
        - hostgroups:
          - hostgroups
          - hostgroups
          nodeid: nodeid
          version: version
          operatingSystem: operatingSystem
          status: status
    AgentInGroupParams:
      required:
      - host
      type: object
      properties:
        host:
          type: string
          description: The hostname of the agent.
        hostgroupAgentParticipation:
          $ref: '#/components/schemas/HostgroupAgentParticipation'
      example:
        host: host
        hostgroupAgentParticipation:
          event: event
          orderDate: orderDate
    AgentInGroupParamsList:
      type: object
      properties:
        agentslist:
          type: array
          items:
            $ref: '#/components/schemas/AgentInGroupParams'
    AgentInHostgroup:
      required:
      - host
      type: object
      properties:
        host:
          type: string
          description: The hostname of the agent.
        tag:
          type: string
          description: Host Group tag. HIDDEN.
        hostgroupAgentParticipation:
          $ref: '#/components/schemas/HostgroupAgentParticipation'
    HostgroupProperties:
      type: object
      properties:
        agentslist:
          type: array
          description: Agents list. HIDDEN.
          items:
            $ref: '#/components/schemas/AgentInGroupParams'
        tag:
          type: string
          description: Host Group tag. HIDDEN.
    HostGroupData:
      type: object
      properties:
        hostgroup:
          type: string
          description: Host Group name
        tag:
          type: string
          description: Host Group tag
        agentslist:
          type: array
          description: Agents list
          items:
            $ref: '#/components/schemas/AgentInGroupParams'
      description: Host group data
    HostGroupsDataList:
      type: array
      description: List of all Host groups.
      items:
        $ref: '#/components/schemas/HostGroupData'
    AgentMngAuth:
      type: object
      properties:
        ControlmServer:
          type: string
          description: control-M server name
        Agent:
          type: string
          description: agent name
        Privilege:
          type: string
          description: "access level (full, update, browse)"
      example:
        Agent: Agent
        ControlmServer: ControlmServer
        Privilege: Privilege
    AgentsDataList:
      type: array
      description: List of all Agents.
      items:
        $ref: '#/components/schemas/AgentData'
    AgentsInGroupListResult:
      type: array
      description: List of the items remained after the action.
      items:
        $ref: '#/components/schemas/AgentInGroupParams'
      x-schema-name: AgentsInGroupListResult
    AgentsInGroupSuccessData:
      type: object
      properties:
        message:
          type: string
          description: The success message that describes the performed action.
        agents:
          type: array
          description: List of the items remained after the action.
          items:
            $ref: '#/components/schemas/AgentInGroupParams'
      example:
        message: message
        agents:
        - host: host
          hostgroupAgentParticipation:
            event: event
            orderDate: orderDate
        - host: host
          hostgroupAgentParticipation:
            event: event
            orderDate: orderDate
    AllowedJobActions:
      type: object
      properties:
        ViewProperties:
          type: boolean
          description: True if Properties action is allowed
        Documentation:
          type: boolean
          description: True if Documentation action is allowed
        Log:
          type: boolean
          description: True if Log action is allowed
        Statistics:
          type: boolean
          description: True if Statistics action is allowed
        ViewOutputList:
          type: boolean
          description: True if ViewOutputList action is allowed
        ViewJcl:
          type: boolean
          description: True if ViewJcl action is allowed
        Why:
          type: boolean
          description: True if Why action is allowed
        Hold:
          type: boolean
          description: True if Hold action is allowed
        Free:
          type: boolean
          description: True if Free action is allowed
        Confirm:
          type: boolean
          description: True if Confirm action is allowed
        Rerun:
          type: boolean
          description: True if Rerun action is allowed
        React:
          type: boolean
          description: True if React action is allowed
        Restart:
          type: boolean
          description: True if Restart action is allowed
        Kill:
          type: boolean
          description: True if Kill action is allowed
        Bypass:
          type: boolean
          description: True if Bypass action is allowed
        Delete:
          type: boolean
          description: True if Delete action is allowed
        Undelete:
          type: boolean
          description: True if Undelete action is allowed
        SetToOk:
          type: boolean
          description: True if SetToOk action is allowed
        EditProperties:
          type: boolean
          description: True if EditProperties action is allowed
        EditJcl:
          type: boolean
          description: True if EditJcl action is allowed
      example:
        Delete: true
        ViewOutputList: true
        Log: true
        ViewJcl: true
        Documentation: true
        Why: true
        Confirm: true
        Rerun: true
        Restart: true
        Statistics: true
        Free: true
        React: true
        EditProperties: true
        SetToOk: true
        Undelete: true
        Bypass: true
        EditJcl: true
        ViewProperties: true
        Hold: true
        Kill: true
    AllowedJobs:
      type: object
      properties:
        Included:
          type: array
          description: "list of including term Groups, combined by OR"
          items:
            $ref: '#/components/schemas/TermGroup'
        Excluded:
          type: array
          description: "list of excluding term Groups, combined by OR"
          items:
            $ref: '#/components/schemas/TermGroup'
      example:
        Included:
        - - - Included
            - Included
          - - Included
            - Included
        - - - Included
            - Included
          - - Included
            - Included
        Excluded:
        - null
        - null
    As2KeyData:
      type: object
      properties:
        as2Id:
          type: string
          description: as2 id HIDDEN
        certificate:
          type: string
          description: partners certificate alias HIDDEN
        destinationFolder:
          type: string
          description: AS2 destination folder HIDDEN
      example:
        as2Id: as2Id
        destinationFolder: destinationFolder
        certificate: certificate
    AssociateData:
      type: object
      properties:
        type:
          type: string
          description: associate typed REQUIRED
        name:
          type: string
          description: associate name REQUIRED
      example:
        name: name
        type: type
    AuthenticationData:
      type: object
      properties:
        ControlM:
          $ref: '#/components/schemas/ControlMAuthenticationData'
        ExternalProvider:
          $ref: '#/components/schemas/ExternalProviderAuthenticationData'
      example:
        ExternalProvider:
          LdapUserAndDomain: LdapUserAndDomain
        ControlM:
          PasswordExpirationDays: 0
          ChangePasswordAtNextLogin: true
          Password: Password
          LockAccount: true
    ClientAccessPrivilegeCategory:
      type: object
      properties:
        SelfServiceAccess:
          type: string
          description: "Control-M Self Service access level (None, Full)"
        WorkloadChangeManagerAccess:
          type: string
          description: "Control-M Workload Change Manager access level (None, Full)"
        UtilitiesAccess:
          type: string
          description: "Control-M, Utilitiesm EM API, BIM Web, UI access level (None,\
            \ Full)"
        ApplicationIntegratorAccess:
          type: string
          description: "Control-M Application Integrator access level (None, Full)"
        AutomationAPIAccess:
          type: string
          description: "Control-M Automation API access level (None, Full)"
        WorkflowInsightsAccess:
          type: string
          description: "Control-M Workflow Insights access level (None, Full)"
      example:
        UtilitiesAccess: UtilitiesAccess
        ApplicationIntegratorAccess: ApplicationIntegratorAccess
        SelfServiceAccess: SelfServiceAccess
        AutomationAPIAccess: AutomationAPIAccess
        WorkflowInsightsAccess: WorkflowInsightsAccess
        WorkloadChangeManagerAccess: WorkloadChangeManagerAccess
    ConfigurationManagerPrivilegeCategory:
      type: object
      properties:
        Authorization:
          type: string
          description: "Authorization access level (None, Browse, Update, Full)"
        ConfigurationManagerAccess:
          type: string
          description: "Control-M Configuration Manager access level (None, Full)"
        Configuration:
          type: string
          description: "Configuration access level (None, Browse, Update, Full)"
        Operation:
          type: string
          description: "Operation access level (None, Browse, Update, Full)"
        Database:
          type: string
          description: "Database Maintenance access level (None, Browse, Update, Full)"
        ControlmSecurity:
          type: string
          description: "Security access level (None, Browse, Update, Full)"
      example:
        Authorization: Authorization
        Configuration: Configuration
        Database: Database
        ConfigurationManagerAccess: ConfigurationManagerAccess
        Operation: Operation
        ControlmSecurity: ControlmSecurity
    PluginData:
      type: object
      properties:
        applicationType:
          type: string
          description: The application type
        applicationVersion:
          type: string
          description: The application version
        pluginVersion:
          type: string
          description: The plugin version
        version:
          type: string
          description: The version
        currentState:
          type: string
          description: The current state
        status:
          type: string
          description: The status
        statusMessage:
          type: string
          description: The status message
        lastUpdate:
          type: string
          description: The last update
        b2bActivated:
          type: string
          description: The B2B activated indication
    PluginMngAuth:
      type: object
      properties:
        ControlmServer:
          type: string
          description: control-M server name
        Agent:
          type: string
          description: agent name
        PluginType:
          type: string
          description: plugin type
        Privilege:
          type: string
          description: "access level (full, update, browse)"
      example:
        Agent: Agent
        ControlmServer: ControlmServer
        Privilege: Privilege
        PluginType: PluginType
    ControlMAuthenticationData:
      type: object
      properties:
        Password:
          type: string
          description: password or secret
        PasswordExpirationDays:
          type: integer
          description: number of days until the password expires
        ChangePasswordAtNextLogin:
          type: boolean
          description: should password be changed in next login
        LockAccount:
          type: boolean
          description: lock account
      example:
        PasswordExpirationDays: 0
        ChangePasswordAtNextLogin: true
        Password: Password
        LockAccount: true
    CPMngAuth:
      type: object
      properties:
        ControlmServer:
          type: string
          description: control-M server name
        Agent:
          type: string
          description: agent name
        PluginType:
          type: string
          description: plugin type
        Name:
          type: string
          description: connection profile name
        Privilege:
          type: string
          description: "access level (full, update, browse)"
      example:
        Agent: Agent
        ControlmServer: ControlmServer
        Privilege: Privilege
        PluginType: PluginType
        Name: Name
    CtmDetails:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the Control-M Server.
        host:
          type: string
          description: The hostname of the Control-M Server is running on.
        state:
          type: string
          description: "Control-M Server state [up|down]."
        message:
          type: string
          description: Control-M Server message describing the communication status.
        version:
          type: string
          description: Control-M Server version.
      example:
        name: name
        host: host
        state: state
        message: message
        version: version
    CtmDetailsList:
      type: array
      description: List of all the Control-M Servers name and host in the system.
      items:
        $ref: '#/components/schemas/CtmDetails'
      x-schema-name: CtmDetailsList
    ExternalProviderAuthenticationData:
      type: object
      properties:
        LdapUserAndDomain:
          type: string
          description: ldap user and domain
      example:
        LdapUserAndDomain: LdapUserAndDomain
    PgpTemplateData:
      type: object
      properties:
        name:
          type: string
          description: Template name HIDDEN
        executableFullPath:
          type: string
          description: Executable Full Path HIDDEN
        exitCode:
          type: integer
          description: Exit code (default 0) HIDDEN
          format: int32
          default: 0
        passphrase:
          type: string
          description: passphrase HIDDEN
          x-prompt: Passphrase VALIDATE
        recipient:
          type: string
          description: Recipient HIDDEN
        encryptionAttributes:
          type: string
          description: Encryption Attributes HIDDEN
        decryptionAttributes:
          type: string
          description: Decryption Attributes HIDDEN
      example:
        name: name
        recipient: recipient
        executableFullPath: executableFullPath
        exitCode: 0
        passphrase: passphrase
        decryptionAttributes: decryptionAttributes
        encryptionAttributes: encryptionAttributes
    HostProperties:
      type: object
      properties:
        hostName:
          type: string
          description: Host Name HIDDEN
          default: Local
        osType:
          type: string
          description: OS Type (Windows/Unix/MVS/OS400/Tandem/OpenVMS/OS2200) HIDDEN
        user:
          type: string
          description: User Name HIDDEN
        password:
          type: string
          description: Password HIDDEN
        protocol:
          type: string
          description: Protocol Name (Local/FTP/SFTP) HIDDEN
        port:
          type: integer
          description: Port HIDDEN
          format: int32
          default: 0
        ssl:
          type: boolean
          description: FTP Over SSL/TLS HIDDEN
          default: false
        sslImplicit:
          type: boolean
          description: SSL Implicit HIDDEN
          default: false
        cccCommand:
          type: boolean
          description: Clear Command Channel (CCC) HIDDEN
          default: false
        cdcCommand:
          type: boolean
          description: Clear Data Channel (CDC) HIDDEN
          default: false
        sslLevel:
          type: string
          description: SSL Security Level (No Authentication/Server Authentication/Client-Server
            Authentication) HIDDEN
        passive:
          type: boolean
          description: FTP Passive HIDDEN
          default: false
        substituteIpAddress:
          type: boolean
          description: Substitute IP Address HIDDEN
          default: false
        extendedPassiveMode:
          type: boolean
          description: Extrernded Passive Mode (EPSV) HIDDEN
          default: false
        sshCompression:
          type: boolean
          description: SSH Compression HIDDEN
          default: false
        logicalKeyName:
          type: string
          description: Private Key Name HIDDEN
          default: ""
        passphrase:
          type: string
          description: Key Passphrase HIDDEN
          default: ""
    MftConfigurationData:
      type: object
      properties:
        connectionTimeoutInSeconds:
          type: integer
          description: Connection timeout (seconds) HIDDEN
          format: int32
        connectionRetries:
          type: integer
          description: Number of connection retries HIDDEN
          format: int32
        connectionTimeBetweenRetriesInSeconds:
          type: integer
          description: Time between connection retries (seconds) HIDDEN
          format: int32
        debugLevel:
          type: integer
          description: MFT debug level (0-5) HIDDEN
          format: int32
        pgpTempDir:
          type: string
          description: PGP temporary directory HIDDEN
        sslDebugTrace:
          type: boolean
          description: Enable SSL debug trace HIDDEN
        pamAuthentication:
          type: boolean
          description: Use PAM password authentication HIDDEN
        proxyIsInUse:
          type: boolean
          description: Use web proxy HIDDEN
        proxyHost:
          type: string
          description: Proxy host HIDDEN
        proxyPort:
          type: integer
          description: Proxy port HIDDEN
          format: int32
        proxyUser:
          type: string
          description: Proxy user HIDDEN
        proxyPassword:
          type: string
          description: Proxy password HIDDEN
        fileWatcherSearchInterval:
          type: integer
          description: File watch search interval (seconds) HIDDEN
          format: int32
        fileWatcherStaticIterations:
          type: integer
          description: Number of iterations while file is static HIDDEN
          format: int32
        fileWatcherCheckFileIsInUse:
          type: boolean
          description: Check that file is not in use HIDDEN
        fileActionsRetriesIntervalInSeconds:
          type: integer
          description: File action retry interval (seconds) HIDDEN
          format: int32
        fileActionsRetriesNum:
          type: integer
          description: Number of file action retries HIDDEN
          format: int32
      example:
        pamAuthentication: true
        connectionTimeoutInSeconds: 0
        pgpTempDir: pgpTempDir
        proxyPassword: proxyPassword
        fileActionsRetriesIntervalInSeconds: 9
        proxyIsInUse: true
        proxyHost: proxyHost
        fileWatcherCheckFileIsInUse: true
        connectionRetries: 6
        debugLevel: 5
        proxyPort: 5
        sslDebugTrace: true
        fileActionsRetriesNum: 3
        proxyUser: proxyUser
        fileWatcherStaticIterations: 7
        connectionTimeBetweenRetriesInSeconds: 1
        fileWatcherSearchInterval: 2
    ZosTemplateData:
      type: object
      properties:
        name:
          type: string
          description: Template name HIDDEN
        recordFormat:
          type: string
          description: Record format HIDDEN
        logicalRecordLength:
          type: integer
          description: Logical record length HIDDEN
          format: int32
        blockSize:
          type: integer
          description: Block Size HIDDEN
          format: int32
        translationTable:
          type: string
          description: Translation table HIDDEN
        transferMode:
          type: string
          description: Transfer mode HIDDEN
        smsManagmentClass:
          type: string
          description: Management class HIDDEN
        allocationUnits:
          type: string
          description: Allocation units HIDDEN
        volume:
          type: string
          description: Volume HIDDEN
        unit:
          type: string
          description: Unit HIDDEN
        primaryAllocation:
          type: integer
          description: Primary Allocation HIDDEN
          format: int32
        secondaryAllocation:
          type: integer
          description: Secondary allocation HIDDEN
          format: int32
        smsDataClass:
          type: string
          description: Data class HIDDEN
        dbcsEncoding:
          type: string
          description: DBCS name HIDDEN
        transferToUniqueFile:
          type: boolean
          description: Transfer to unique file HIDDEN
        additionalOptionsHost1:
          type: string
          description: Additional options host 1 HIDDEN
        additionalOptionsHost2:
          type: string
          description: Additional options host 1 HIDDEN
      example:
        allocationUnits: allocationUnits
        primaryAllocation: 1
        transferToUniqueFile: true
        additionalOptionsHost1: additionalOptionsHost1
        additionalOptionsHost2: additionalOptionsHost2
        smsManagmentClass: smsManagmentClass
        translationTable: translationTable
        recordFormat: recordFormat
        blockSize: 6
        dbcsEncoding: dbcsEncoding
        volume: volume
        unit: unit
        smsDataClass: smsDataClass
        secondaryAllocation: 5
        logicalRecordLength: 0
        transferMode: transferMode
        name: name
    ExternalUserData:
      type: object
      properties:
        name:
          type: string
          description: external user name REQUIRED:addExternalUser | HIDDEN
        email:
          type: string
          description: user email REQUIRED:addExternalUser | HIDDEN
        company:
          type: string
          description: user's company REQUIRED:addExternalUser | HIDDEN
        password:
          type: string
          description: user password HIDDEN:updateExternalUser
          x-prompt: Password VALIDATE
        description:
          type: string
          description: user description HIDDEN
        phoneNumber:
          type: string
          description: external user phone number HIDDEN
        sshKey:
          type: string
          description: SSH key string HIDDEN
        as2Key:
          $ref: '#/components/schemas/As2KeyData'
        isLocked:
          type: boolean
          description: indicates whether the user account is locked HIDDEN
        lockReason:
          type: string
          description: provides the reason for locking the user account HIDDEN
        changePasswordAtNextLogin:
          type: boolean
          description: indicates whether a password change is required at next login
            HIDDEN
        passwordNeverExpires:
          type: boolean
          description: indicates whether the user's password is set to never expire
            HIDDEN
      example:
        password: password
        passwordNeverExpires: true
        phoneNumber: phoneNumber
        sshKey: sshKey
        isLocked: true
        name: name
        changePasswordAtNextLogin: true
        description: description
        company: company
        as2Key:
          as2Id: as2Id
          destinationFolder: destinationFolder
          certificate: certificate
        email: email
        lockReason: lockReason
    FolderPropertiesData:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder. REQUIRED:addMFTFolder | HIDDEN
        authorizedInternalUsers:
          type: array
          description: Authorized Internal Users. HIDDEN
          items:
            type: string
        authorizedExternalUsersAndGroups:
          type: array
          description: Authorized External Users And User Groups. HIDDEN
          items:
            type: string
        deleteFilesAfterDownload:
          type: boolean
          description: Delete file after downloaded from incoming folder. HIDDEN
        notifyByEmailWhenFileArrive:
          type: boolean
          description: Send email notification to external users when a new file arrives.
            HIDDEN
        retentionPolicy:
          type: integer
          description: Retention Time in hours. HIDDEN
          format: int64
        sizeLimit:
          type: integer
          description: Size limit for folder (in Gigabyte). HIDDEN
          format: int64
        allowedFilePattern:
          type: string
          description: allowed file pattern wildcard. HIDDEN
        blockedFilePattern:
          type: string
          description: blocked file pattern wildcard. HIDDEN
        accessType:
          type: string
          description: "Folder's access type (Limited, Unlimited). HIDDEN"
      example:
        accessType: accessType
        sizeLimit: 6
        authorizedInternalUsers:
        - authorizedInternalUsers
        - authorizedInternalUsers
        notifyByEmailWhenFileArrive: true
        allowedFilePattern: allowedFilePattern
        name: name
        deleteFilesAfterDownload: true
        authorizedExternalUsersAndGroups:
        - authorizedExternalUsersAndGroups
        - authorizedExternalUsersAndGroups
        retentionPolicy: 0
        blockedFilePattern: blockedFilePattern
    FolderAuth:
      type: object
      properties:
        Privilege:
          type: string
          description: "access level (Full, Update, Browse)"
        ControlmServer:
          type: string
          description: control-M server name
        Library:
          type: string
          description: job application
        Folder:
          type: string
          description: job sub application
        Order:
          type: boolean
          description: Allow ordering
        Run:
          type: boolean
          description: Allow ordering
        Jobs:
          $ref: '#/components/schemas/JobLevelAuth'
      example:
        Order: true
        Jobs:
          SubApplication: SubApplication
          Privilege: Privilege
          Application: Application
        Run: true
        Library: Library
        Privilege: Privilege
        ControlmServer: ControlmServer
        Folder: Folder
    HostgroupAgentParticipation:
      required:
      - event
      type: object
      properties:
        event:
          type: string
          description: The event name.
        orderDate:
          type: string
          description: Odate dd-mm-yy or ******
      example:
        event: event
        orderDate: orderDate
    JobLevelAuth:
      type: object
      properties:
        Privilege:
          type: string
          description: "access level (Full, Update, Browse)"
        Application:
          type: string
          description: job application
        SubApplication:
          type: string
          description: job sub application
      example:
        SubApplication: SubApplication
        Privilege: Privilege
        Application: Application
    UpgradeNotification:
      type: object
      properties:
        message:
          type: string
    KeyValue:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Unique key
        value:
          type: string
          description: Any value in string form.
        defaultValue:
          type: string
          description: The default value if exist.
        validation:
          type: string
          description: The validation type number.
        category:
          type: string
          description: The category of the parameter.
        description:
          type: string
          description: The description of the parameter.
        errMsg:
          type: string
          description: The error message of the parameter.
        verification:
          type: string
          description: The verification type of the parameter.
        table:
          type: string
          description: The table the parameter belongs to.
        type:
          type: string
          description: The parameter type.
        limits:
          type: string
          description: The validation limits of the parameter.
      example:
        defaultValue: defaultValue
        name: name
        errMsg: errMsg
        description: description
        category: category
        type: type
        value: value
        validation: validation
        verification: verification
        table: table
        limits: limits
    SamlStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: The value of saml mode
    UserAdditionalProperties:
      type: object
      properties:
        memberOfGroups:
          type: array
          description: List of role names
          items:
            type: string
        authentication:
          $ref: '#/components/schemas/AuthenticationData'
        isExternalUser:
          type: boolean
    SystemSettingKeyValue:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Unique key
        value:
          type: string
          description: Any value in string form.
    SystemSettingProperty:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: Any value in string form.
    SystemSettingAnnotationProperty:
      type: array
      items:
        type: string
      x-schema-name: SystemSettingAnnotationProperty
    KeyValueListResult:
      type: array
      items:
        $ref: '#/components/schemas/KeyValue'
      x-schema-name: KeyValueListResult
    KeyValueType:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Unique key
        value:
          type: string
          description: Any value in string form.
        defaultValue:
          type: string
          description: The default value if exist.
        type:
          type: string
          description: the type of the request.
    KeyValueTypeListResult:
      type: array
      items:
        $ref: '#/components/schemas/KeyValueType'
    MonitoringPrivilegeCategory:
      type: object
      properties:
        Alert:
          type: string
          description: "Alerts access level (None, Browse, Update, Full)"
        ViewpointArchive:
          type: string
          description: "Archived Viewpoints access level (None, Browse, Update, Full)"
      example:
        Alert: Alert
        ViewpointArchive: ViewpointArchive
    PingAgentParams:
      required:
      - discover
      - timeout
      type: object
      properties:
        discover:
          type: boolean
          description: Discover parameter when true the agent will be added to the
            Control-M. HIDDEN
          default: false
        timeout:
          type: integer
          description: maximum time in seconds to wait (default 60). HIDDEN
          format: int32
          default: 60
    PlanningPrivilegeCategory:
      type: object
      properties:
        PeriodicalStatistics:
          type: string
          description: "Periodical Statistics access level (None, Browse, Update,\
            \ Full)"
        ForecastOrBatchImpactManagerConfig:
          type: string
          description: "Forecast/BIM Configuration access level (None, Browse, Update,\
            \ Full)"
        PromotionRules:
          type: string
          description: "Promotion Rules access level (None, Browse, Update, Full)"
        PromoteAction:
          type: string
          description: "Promote Action access level (None, Browse, Update, Full)"
      example:
        ForecastOrBatchImpactManagerConfig: ForecastOrBatchImpactManagerConfig
        PromotionRules: PromotionRules
        PeriodicalStatistics: PeriodicalStatistics
        PromoteAction: PromoteAction
    PrivilegeName:
      type: object
      properties:
        Privilege:
          type: string
          description: "access level (none, full, update, browse)"
        Name:
          type: string
          description: pattern value
      example:
        Privilege: Privilege
        Name: Name
    PrivilegeNameControlm:
      type: object
      properties:
        Privilege:
          type: string
          description: "access level (Full, Update, Browse)"
        ControlmServer:
          type: string
          description: control-M server name
        Name:
          type: string
          description: property name
      example:
        Privilege: Privilege
        ControlmServer: ControlmServer
        Name: Name
    Privileges:
      type: object
      properties:
        ClientAccess:
          $ref: '#/components/schemas/ClientAccessPrivilegeCategory'
        ConfigurationManager:
          $ref: '#/components/schemas/ConfigurationManagerPrivilegeCategory'
        Monitoring:
          $ref: '#/components/schemas/MonitoringPrivilegeCategory'
        Planning:
          $ref: '#/components/schemas/PlanningPrivilegeCategory'
        Tools:
          $ref: '#/components/schemas/ToolsPrivilegeCategory'
        ViewpointManager:
          $ref: '#/components/schemas/ViewpointManagerPrivilegeCategory'
      example:
        ClientAccess:
          UtilitiesAccess: UtilitiesAccess
          ApplicationIntegratorAccess: ApplicationIntegratorAccess
          SelfServiceAccess: SelfServiceAccess
          AutomationAPIAccess: AutomationAPIAccess
          WorkflowInsightsAccess: WorkflowInsightsAccess
          WorkloadChangeManagerAccess: WorkloadChangeManagerAccess
        Tools:
          Cli: Cli
          ForecastReport: ForecastReport
          BatchImpactManagerReport: BatchImpactManagerReport
        ViewpointManager:
          Filters: Filters
          Hierarchies: Hierarchies
          Collections: Collections
          Viewpoints: Viewpoints
        Planning:
          ForecastOrBatchImpactManagerConfig: ForecastOrBatchImpactManagerConfig
          PromotionRules: PromotionRules
          PeriodicalStatistics: PeriodicalStatistics
          PromoteAction: PromoteAction
        ConfigurationManager:
          Authorization: Authorization
          Configuration: Configuration
          Database: Database
          ConfigurationManagerAccess: ConfigurationManagerAccess
          Operation: Operation
          ControlmSecurity: ControlmSecurity
        Monitoring:
          Alert: Alert
          ViewpointArchive: ViewpointArchive
    ActionsAuthRecord:
      type: object
      properties:
        destination:
          type: string
          description: "component in which the action sent - Possible Values - EM,\
            \ CTM_Server, CTM_Agent, CTM_CM"
          enum:
          - EM
          - CTM_Server
          - CTM_Agent
          - CTM_CM
        action:
          type: string
          description: "action name unique list of actions' names as appear in the\
            \ actions_auth em db table, along with the destination makes a unique\
            \ action auth entry"
          enum:
          - Collect_measurements_and_reports_request
          - Set_agent_debug_info_request
          - Get_agent_debug_info_request
          - Set_agent_config_params_request
          - Get_agent_config_params_request
          - Ctmag_set_cert_request
          - Ctmag_get_csr_request
          - Ctmag_get_cert_expire_date_request
          - Ctmag_get_config_request
          - Ctmagent_recycle_request
          - Ctmag_get_locale_list_request
          - Ctmag_update_config_request
          - Authorize_remote_host_request
          - Ctmsap_update_ew_config_request
          - Ctmsap_get_ew_config_request
          - Ctmcm_update_extract_rule_table_request
          - Ctmcm_get_extract_rule_table_request
          - Ctmcm_get_templates_request
          - Ctmcm_get_accounts_request
          - Ctmcm_add_account_request
          - Ctmcm_update_account_request
          - Ctmcm_delete_account_request
          - Ctmcm_validate_account_request
          - Ctmcm_get_info_request
          - Ctmcm_mass_update_request
          - Ctmcm_get_config_request
          - Ctmcm_update_config_request
          - Ctmsap_get_accounts_names_request
          - Ctmsap_get_sap_interception_criteria_request
          - Ctmsap_update_sap_interception_criteria_request
          - Ctmsap_get_ctm_interception_rules_request
          - Ctmsap_update_ctm_interception_rules_request
          - Ctmsap_get_extract_rules_request
          - Ctmsap_update_extract_rules_request
          - Ctmsap_get_user_exit_files_request
          - Ctmsap_get_xtractor_config_request
          - Ctmsap_update_xtractor_config_request
          - Ctmsap_check_XBP2_enable_request
          - Ctmsap_get_sap_calendars_request
          - Ctmsap_import_sap_calendar_request
          - Ctmsap_get_ew_events_names_request
          - Ctmsap_create_profile_request
          - Ctmsap_set_profile_request
          - Ctmsap_delete_profile_request
          - Ctmsap_get_profiles_request
          - Ctmsap_get_profile_criteria_request
          - Ctmsap_activate_profile_request
          - Ctmag_set_extract_service_status_request
          - Ctmag_update_extract_service_prop_request
          - Ctmag_get_extract_service_prop_request
          - Ctmcm_jndi_browse_request
          - Ctmcm_load_ejb_request
          - Ctmcm_get_encryption_type_request
          - Ctmcm_get_known_hosts_request
          - Ctmcm_update_aft_server_configuration_request
          - Ctmcm_get_aft_server_configuration_request
          - Ctmcm_verify_local_path_request
          - Ctmcm_mft_b2b_rest_patch_request
          - Ctmcm_get_as2_encryption_algorithms_request
          - Ctmcm_get_as2_signature_algorithms_request
          - Ctmcm_get_s3_regions_request
          - Ctmdb_remove_dbvendor_request
          - Ctmdb_update_dbvendor_request
          - Ctmdb_add_dbvendor_request
          - Ctmcm_mft_get_b2b_mode_request
          - Ctmcm_mft_b2b_rest_delete_request
          - Ctmcm_mft_b2b_rest_read_request
          - Ctmcm_mft_b2b_rest_update_request
          - Ctmcm_mft_b2b_rest_create_request
          - Ctmcm_mft_b2b_general_command_request
          - Ctmpsft_recycle_request
          - Ctmcm_get_Mvs_templates_request
          - Ctmcm_delete_Mvs_template_request
          - Ctmcm_add_Mvs_template_request
          - Ctmcm_update_Mvs_template_request
          - Ctmsap_update_sap_interception_profile_request
          - Ctmsap_get_sap_interception_profiles_request
          - Ctmcm_get_pgp_templates_request
          - Ctmcm_delete_pgp_template_request
          - Ctmcm_add_pgp_template_request
          - Ctmcm_update_pgp_template_request
          - Ctmcm_mass_update_details_request
          - Ctmcm_create_ssh_key_request
          - Ctmcm_authorize_remote_host_request
          - Ctmcm_get_home_directory_request
          - Ctmoebs_activate_ew_request
          - Ctmoebs_get_alerts_list_request
          - Ctmoebs_get_applications_list_request
          - Ctmoebs_update_ew_rules_request
          - Ctmoebs_get_ew_rules_request
          - Ctmoebs_update_ew_config_request
          - Ctmoebs_get_ew_config_request
          - Ctmoebs_get_service_names_request
          - Ctmcm_browse_file_request
          - Ctmsap_clear_events_request
          - Ctmsap_update_ew_rules_request
          - Ctmsap_get_ew_rules_request
          - Zos_get_sys_parms_request
          - Update_deployment_target_request
          - Update_deployment_parameters_request
          - Get_deployment_output_request
          - Retry_deployment_request
          - Cancel_deployment_request
          - Delete_deployment_request
          - Add_uninstall_deployment_request
          - Ctmsec_get_users_groups_request
          - Ctmsec_delete_user_request
          - Ctmsec_delete_group_request
          - Ctmsec_update_user_request
          - Ctmsec_update_group_request
          - Ctmsec_new_user_request
          - Ctmsec_new_group_request
          - Ctmsec_get_security_attributes_request
          - Ctmsec_update_security_attributes_request
          - Ctmagent_add_request
          - Ctmagent_delete_request
          - Ctmagent_ping_request
          - Ctmagent_get_parameters_request
          - Ctmagent_set_parameters_request
          - Ctmagent_enable_request
          - Ctmagent_disable_request
          - Get_ctms_debug_info_request
          - Set_ctms_debug_info_request
          - Ctmrjx_get_host_details_request
          - Ctmrjx_add_host_request
          - Ctmrjx_update_host_request
          - Ctmrjx_delete_host_request
          - Ctmrjx_test_host_request
          - Ctmrjx_enable_host_request
          - Ctmrjx_disable_host_request
          - Ctmrjx_ping_host_request
          - Ctmrjx_get_owners_request
          - Ctmrjx_get_owner_details_request
          - Ctmrjx_add_owner_request
          - Ctmrjx_update_owner_request
          - Ctmrjx_delete_owner_request
          - Ctmrjx_get_keynames_list_request
          - Ctmrjx_test_user_request
          - Ctm_get_node_groups_request
          - Ctm_update_node_group_request
          - Ctm_add_node_group_request
          - Ctm_delete_node_group_request
          - Zos_ctl_request
          - Zos_new_sys_parm_request
          - Zos_update_sys_parm_request
          - Zos_delete_sys_parm_request
          - Zos_refresh_sys_parms_request
          - Ctmnodeid_test_user_request
          - Ctm_server_get_sys_parms_request
          - Ctm_server_update_sys_parm_request
          - Ctm_server_refresh_sys_parms_request
          - Set_pause_request
          - Zos_get_sys_parms_enhanced_request
          - Ctmserver_get_ssh_keys_list_request
          - Ctmserver_create_ssh_key_request
          - Ctmserver_update_ssh_key_request
          - Ctmserver_delete_ssh_key_request
          - Ctmserver_get_public_key_request
          - Get_supported_shout_destination_addresses_request
          - Get_shout_destination_tables_request
          - Delete_shout_destination_table_request
          - Set_active_shout_destination_table_request
          - Update_shout_destination_request
          - Create_shout_destination_request
          - Delete_shout_destination_request
          - Ctm_get_all_node_restrictions_request
          - Ctm_add_node_restriction_request
          - Ctm_update_node_restriction_request
          - Ctm_delete_node_restrictions_request
          - Ctmsrv_get_cm_accounts_status_request
          - Ctmsrv_update_cm_account_status_request
          - Set_ctm_primary_request
          - Set_ctm_failover_mode_request
          - Replication_mode_request
          - Ctmagent_troubleshooting_request
          - Set_db_host_port_request
          - Get_db_host_port_request
          - Xalert_unhandle_request
          - Create_em_component_request
          - Get_component_request
          - Refresh_ctms_ag_deploy_request
          - Refresh_ctms_request
          - Get_agents_request
          - Xalert_handle_request
          - Get_all_node_groups_request
          - Get_components_request
          - View_agents_log_request
          - Get_xalerts_request
          - Delete_sys_parms_request
          - Update_sys_parms_request
          - New_sys_parms_request
          - Get_sys_parms_request
          - Get_cms_details_request
          - Get_ctms_codes_request
          - Delete_ctms_request
          - Ccp_add_or_update_request
          - Ccp_get_summary_request
          - Ccp_get_full_request
          - Ccp_delete_request
          - Ccp_get_sync_status_request
          - Get_webserver_debuglevelinfo_request
          - New_ctms_request
          - Discover_request
          - Get_ctms_details_request
          - Un_manage_ctms_request
          - Manage_ctms_request
          - Disable_ctms_request
          - Get_WebServer_urls_request
          - Enable_ctms_request
          - Rename_CTMServer_dry_run_request
          - Get_db_details_request
          - Get_em_details_request
          - Move_em_control_request
          - Set_webserver_debuglevelinfo_request
          - Set_em_primary_request
          - Start_replication_request
          - Create_xalert_request
          - Set_em_failover_mode_request
          - Purge_xalerts_request
          - Remove_old_versions_request
          - Move_em_ctm_control_request
          - Set_em_ctm_primary_request
          - Get_capacity_exceed_alert_params_request
          - Set_capacity_exceed_alert_params_request
          - Test_envs_connectivity_request
          - Set_enable_capacity_exceed_alert_request
          - Get_enable_capacity_exceed_alert_request
          - Get_license_site_info_request
          - Get_license_info_request
          - Update_license_request
          - Get_web_server_details_request
          - Get_available_client_updates_request
          - Set_required_fp_or_patch_request
          - Import_client_certificates_request
          - Get_archive_server_conf_request
          - Set_archive_server_conf_request
          - Archive_Browse_CCM
          - Archive_Update_CCM
          - Set_B2B_mode_for_mft_request
          - Promote_and_rename_CTMServer_request
          - Get_compatibility_details_request
          - Set_compatibility_version_request
          - Update_local_CTMServer_attribute_request
          - Update_ctms_request
          - Ignore_request
          - Recycle_request
          - Stop_request
          - Start_request
          - Get_em_component_request
          - Delete_em_component_request
          - Remove_old_alerts_request
          - Update_em_component_request
          - List_em_user_names_request
          - Get_diag_output_request
          - Add_deployment_request
          - Get_deployment_list_request
          - Get_machine_details_request
          - Get_packages_request
          - Update_Add_Ons_request
          - Get_Add_Ons_request
          - LDAP_get_types_request
          - Web_launch_prepare_package
          - ManageSSL_generate_certificate_request
          - ManageSSL_get_components_request
          - ManageSSL_create_new_CA_request
          - ManageSSL_get_CA_details_request
          - Is_annotation_required_request
          - Actions_auth_request
          - Login_admin_db_request
          - Db_extend_request
          - Get_db_file_list_request
          - Db_check_space_request
          - Polling_request
          - Ctl_request
          - Xalert_update_note_request
          - Ctmcm_mft_set_b2b_mode_request
          - Get_ctm_node_groups_request
        category:
          type: string
          description: "Privilege (Can be empty) Possible Values for categories fields\
            \  - OPER, DATABASE, CONFIG, CTMSEC, CPMAN, RAMAN, AGMAN, CMMAN, CCP,\
            \ UNKNOWN"
        authLevel:
          type: string
          description: "required minimum authorization level - BROWSE, UPDATE, FULL"
        actionType:
          type: string
          description: "R - request always pass, authorization is done on the response;\
            \ C - Connection Profile name will remain empty and will be ignored; E\
            \ - Not related to authorization"
        additionalInfo:
          type: string
          description: currently not in use regarding authorization
        category2:
          type: string
        policy:
          type: string
          description: "relation between Category and category2 - 1. Only category,\
            \ 2.\tOnly Category2, 3. Category AND Category2, 4. Category OR Category2"
          enum:
          - CTG
          - CTG2
          - CTG_AND_CTG2
          - CTG_OR_CTG2
        authAttr:
          type: string
          description: "In case that not all information for authorization exist in\
            \ the header request, it contain path in the body for the missing field\\\
            fields."
    EncryptionMetadata:
      type: object
      properties:
        encryptionType:
          type: string
          description: The type of encryption algorithm to be used to de/encrypt the
            fields (AES256 or Blowfish)
        fieldsToEncrypt:
          type: array
          description: The list of XML tag names identifying the fields to be de/encrypted
            in the request XML
          items:
            type: string
    RawCmsXmlRequest:
      type: object
      properties:
        rawXmlRequest:
          type: string
          description: The raw XML request string
        encryptionMetadata:
          $ref: '#/components/schemas/EncryptionMetadata'
    RoleData:
      type: object
      properties:
        Name:
          type: string
          description: role name
        Description:
          type: string
          description: role description
        OrganizationGroups:
          type: array
          description: organization groups
          items:
            type: string
        AllowedJobs:
          $ref: '#/components/schemas/AllowedJobs'
        AllowedJobActions:
          $ref: '#/components/schemas/AllowedJobActions'
        Privileges:
          $ref: '#/components/schemas/Privileges'
        Folders:
          type: array
          items:
            $ref: '#/components/schemas/FolderAuth'
        Calendars:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        RunasUsers:
          type: array
          items:
            $ref: '#/components/schemas/RunasUserAuth'
        WorkloadPolicies:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeName'
        SiteStandard:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeName'
        SiteCustomization:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeName'
        Services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceAuth'
        Events:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        Mutexes:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        Locks:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        Semaphores:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        Pools:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        Variables:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeNameControlm'
        GlobalEvents:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeName'
        AgentManagement:
          type: array
          items:
            $ref: '#/components/schemas/AgentMngAuth'
        PluginManagement:
          type: array
          items:
            $ref: '#/components/schemas/PluginMngAuth'
        ConnectionProfileManagement:
          type: array
          items:
            $ref: '#/components/schemas/CPMngAuth'
        RunasDefinitionManagement:
          type: array
          items:
            $ref: '#/components/schemas/RunasDefinitionAuth'
      example:
        RunasUsers:
        - Host: Host
          ControlmServer: ControlmServer
          RunasUser: RunasUser
        - Host: Host
          ControlmServer: ControlmServer
          RunasUser: RunasUser
        SiteStandard:
        - null
        - null
        Description: Description
        OrganizationGroups:
        - OrganizationGroups
        - OrganizationGroups
        AllowedJobActions:
          Delete: true
          ViewOutputList: true
          Log: true
          ViewJcl: true
          Documentation: true
          Why: true
          Confirm: true
          Rerun: true
          Restart: true
          Statistics: true
          Free: true
          React: true
          EditProperties: true
          SetToOk: true
          Undelete: true
          Bypass: true
          EditJcl: true
          ViewProperties: true
          Hold: true
          Kill: true
        SiteCustomization:
        - null
        - null
        Calendars:
        - Privilege: Privilege
          ControlmServer: ControlmServer
          Name: Name
        - Privilege: Privilege
          ControlmServer: ControlmServer
          Name: Name
        Locks:
        - null
        - null
        AgentManagement:
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
        ConnectionProfileManagement:
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
          PluginType: PluginType
          Name: Name
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
          PluginType: PluginType
          Name: Name
        Pools:
        - null
        - null
        RunasDefinitionManagement:
        - ControlmServer: ControlmServer
          Privilege: Privilege
        - ControlmServer: ControlmServer
          Privilege: Privilege
        Name: Name
        AllowedJobs:
          Included:
          - - - Included
              - Included
            - - Included
              - Included
          - - - Included
              - Included
            - - Included
              - Included
          Excluded:
          - null
          - null
        Variables:
        - null
        - null
        Services:
        - AllowedActions:
            DrillDown: true
            ViewOrderableService: true
            Run: true
            Hold: true
            Resume: true
          Privilege: Privilege
          Name: Name
        - AllowedActions:
            DrillDown: true
            ViewOrderableService: true
            Run: true
            Hold: true
            Resume: true
          Privilege: Privilege
          Name: Name
        PluginManagement:
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
          PluginType: PluginType
        - Agent: Agent
          ControlmServer: ControlmServer
          Privilege: Privilege
          PluginType: PluginType
        Mutexes:
        - null
        - null
        Events:
        - null
        - null
        GlobalEvents:
        - null
        - null
        Privileges:
          ClientAccess:
            UtilitiesAccess: UtilitiesAccess
            ApplicationIntegratorAccess: ApplicationIntegratorAccess
            SelfServiceAccess: SelfServiceAccess
            AutomationAPIAccess: AutomationAPIAccess
            WorkflowInsightsAccess: WorkflowInsightsAccess
            WorkloadChangeManagerAccess: WorkloadChangeManagerAccess
          Tools:
            Cli: Cli
            ForecastReport: ForecastReport
            BatchImpactManagerReport: BatchImpactManagerReport
          ViewpointManager:
            Filters: Filters
            Hierarchies: Hierarchies
            Collections: Collections
            Viewpoints: Viewpoints
          Planning:
            ForecastOrBatchImpactManagerConfig: ForecastOrBatchImpactManagerConfig
            PromotionRules: PromotionRules
            PeriodicalStatistics: PeriodicalStatistics
            PromoteAction: PromoteAction
          ConfigurationManager:
            Authorization: Authorization
            Configuration: Configuration
            Database: Database
            ConfigurationManagerAccess: ConfigurationManagerAccess
            Operation: Operation
            ControlmSecurity: ControlmSecurity
          Monitoring:
            Alert: Alert
            ViewpointArchive: ViewpointArchive
        Semaphores:
        - null
        - null
        Folders:
        - Order: true
          Jobs:
            SubApplication: SubApplication
            Privilege: Privilege
            Application: Application
          Run: true
          Library: Library
          Privilege: Privilege
          ControlmServer: ControlmServer
          Folder: Folder
        - Order: true
          Jobs:
            SubApplication: SubApplication
            Privilege: Privilege
            Application: Application
          Run: true
          Library: Library
          Privilege: Privilege
          ControlmServer: ControlmServer
          Folder: Folder
        WorkloadPolicies:
        - Privilege: Privilege
          Name: Name
        - Privilege: Privilege
          Name: Name
    RoleHeader:
      type: object
      properties:
        name:
          type: string
          description: role name
        description:
          type: string
          description: role description
      example:
        name: name
        description: description
    RoleHeaderList:
      type: array
      description: List of all authorization roles
      items:
        $ref: '#/components/schemas/RoleHeader'
      x-schema-name: RoleHeaderList
    RoleDataFull:
      type: object
      properties:
        Overwrite:
          type: boolean
          description: can overwrtie existing role
        OrganizationGroups:
          type: array
          description: organization groups
          items:
            type: string
        RoleData:
          $ref: '#/components/schemas/RoleData'
    RunasDefinitionAuth:
      type: object
      properties:
        ControlmServer:
          type: string
          description: control-M server name
        Privilege:
          type: string
          description: "access level (full, update, browse)"
      example:
        ControlmServer: ControlmServer
        Privilege: Privilege
    RunasUserAuth:
      type: object
      properties:
        ControlmServer:
          type: string
          description: control-M server name
        RunasUser:
          type: string
          description: runas user
        Host:
          type: string
          description: HOst or host group value
      example:
        Host: Host
        ControlmServer: ControlmServer
        RunasUser: RunasUser
    RunAsUserData:
      type: object
      properties:
        agent:
          type: string
          description: "agent name, can ended by wildcard REQUIRED"
        user:
          type: string
          description: user name REQUIRED
        password:
          type: string
          description: Password
          x-prompt: Password VALIDATE
        key:
          $ref: '#/components/schemas/RunAsUserKeyData'
      example:
        agent: agent
        password: password
        user: user
        key:
          keyname: keyname
          passphrase: passphrase
    RunAsUserDetailsData:
      type: object
      properties:
        password:
          type: string
          description: Password
          x-prompt: Password VALIDATE
        key:
          $ref: '#/components/schemas/RunAsUserKeyData'
    RunAsUserKeyData:
      type: object
      properties:
        keyname:
          type: string
          description: ssh key
        passphrase:
          type: string
          description: SSH key passphrase
      example:
        keyname: keyname
        passphrase: passphrase
    RunAsUsersList:
      type: array
      description: List of all Run-as users.
      items:
        $ref: '#/components/schemas/RunAsUserData'
      x-schema-name: RunAsUsersList
    SecretKeyValue:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Unique key
        value:
          type: string
          description: Any value in string form.
          x-prompt: New secret value VALIDATE
    SecretValue:
      type: object
      properties:
        value:
          type: string
          description: The parameter value
          x-prompt: New secret value VALIDATE
    ServiceAuth:
      type: object
      properties:
        Privilege:
          type: string
          description: "access level (Full, Update, Browse, None)"
        Name:
          type: string
          description: service name
        AllowedActions:
          $ref: '#/components/schemas/ServiceAuthAction'
      example:
        AllowedActions:
          DrillDown: true
          ViewOrderableService: true
          Run: true
          Hold: true
          Resume: true
        Privilege: Privilege
        Name: Name
    ServiceAuthAction:
      type: object
      properties:
        DrillDown:
          type: boolean
          description: Is DrillDown allowed in service
        Run:
          type: boolean
          description: Is Run allowed in service
        Hold:
          type: boolean
          description: Is Hold allowed in service
        Resume:
          type: boolean
          description: Is Resume allowed in service
        ViewOrderableService:
          type: boolean
          description: Is View Orderable Service allowed in service
      example:
        DrillDown: true
        ViewOrderableService: true
        Run: true
        Hold: true
        Resume: true
    ToolsPrivilegeCategory:
      type: object
      properties:
        Cli:
          type: string
          description: "CLI access level (None, Browse, Update, Full)"
        BatchImpactManagerReport:
          type: string
          description: "BIM Reports access level (None, Browse, Update, Full)"
        ForecastReport:
          type: string
          description: "Forecast Reports access level (None, Browse, Update, Full)"
      example:
        Cli: Cli
        ForecastReport: ForecastReport
        BatchImpactManagerReport: BatchImpactManagerReport
    SshKeyProperties:
      type: object
      properties:
        keyName:
          type: string
          description: External user data REQUIRED
        keyPassphrase:
          type: string
          description: SSH Key passphrase REQUIRED
          x-prompt: Password VALIDATE
        keySize:
          type: integer
          description: SSH Key size (default 2048)
          format: int32
          default: 2048
    UserData:
      type: object
      properties:
        Name:
          type: string
          description: user name
        Description:
          type: string
          description: user description
        FullName:
          type: string
          description: full user name
        Authentication:
          $ref: '#/components/schemas/AuthenticationData'
        Roles:
          type: array
          items:
            type: string
        Authorization:
          $ref: '#/components/schemas/RoleData'
      example:
        Authorization:
          RunasUsers:
          - Host: Host
            ControlmServer: ControlmServer
            RunasUser: RunasUser
          - Host: Host
            ControlmServer: ControlmServer
            RunasUser: RunasUser
          SiteStandard:
          - null
          - null
          Description: Description
          OrganizationGroups:
          - OrganizationGroups
          - OrganizationGroups
          AllowedJobActions:
            Delete: true
            ViewOutputList: true
            Log: true
            ViewJcl: true
            Documentation: true
            Why: true
            Confirm: true
            Rerun: true
            Restart: true
            Statistics: true
            Free: true
            React: true
            EditProperties: true
            SetToOk: true
            Undelete: true
            Bypass: true
            EditJcl: true
            ViewProperties: true
            Hold: true
            Kill: true
          SiteCustomization:
          - null
          - null
          Calendars:
          - Privilege: Privilege
            ControlmServer: ControlmServer
            Name: Name
          - Privilege: Privilege
            ControlmServer: ControlmServer
            Name: Name
          Locks:
          - null
          - null
          AgentManagement:
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
          ConnectionProfileManagement:
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
            PluginType: PluginType
            Name: Name
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
            PluginType: PluginType
            Name: Name
          Pools:
          - null
          - null
          RunasDefinitionManagement:
          - ControlmServer: ControlmServer
            Privilege: Privilege
          - ControlmServer: ControlmServer
            Privilege: Privilege
          Name: Name
          AllowedJobs:
            Included:
            - - - Included
                - Included
              - - Included
                - Included
            - - - Included
                - Included
              - - Included
                - Included
            Excluded:
            - null
            - null
          Variables:
          - null
          - null
          Services:
          - AllowedActions:
              DrillDown: true
              ViewOrderableService: true
              Run: true
              Hold: true
              Resume: true
            Privilege: Privilege
            Name: Name
          - AllowedActions:
              DrillDown: true
              ViewOrderableService: true
              Run: true
              Hold: true
              Resume: true
            Privilege: Privilege
            Name: Name
          PluginManagement:
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
            PluginType: PluginType
          - Agent: Agent
            ControlmServer: ControlmServer
            Privilege: Privilege
            PluginType: PluginType
          Mutexes:
          - null
          - null
          Events:
          - null
          - null
          GlobalEvents:
          - null
          - null
          Privileges:
            ClientAccess:
              UtilitiesAccess: UtilitiesAccess
              ApplicationIntegratorAccess: ApplicationIntegratorAccess
              SelfServiceAccess: SelfServiceAccess
              AutomationAPIAccess: AutomationAPIAccess
              WorkflowInsightsAccess: WorkflowInsightsAccess
              WorkloadChangeManagerAccess: WorkloadChangeManagerAccess
            Tools:
              Cli: Cli
              ForecastReport: ForecastReport
              BatchImpactManagerReport: BatchImpactManagerReport
            ViewpointManager:
              Filters: Filters
              Hierarchies: Hierarchies
              Collections: Collections
              Viewpoints: Viewpoints
            Planning:
              ForecastOrBatchImpactManagerConfig: ForecastOrBatchImpactManagerConfig
              PromotionRules: PromotionRules
              PeriodicalStatistics: PeriodicalStatistics
              PromoteAction: PromoteAction
            ConfigurationManager:
              Authorization: Authorization
              Configuration: Configuration
              Database: Database
              ConfigurationManagerAccess: ConfigurationManagerAccess
              Operation: Operation
              ControlmSecurity: ControlmSecurity
            Monitoring:
              Alert: Alert
              ViewpointArchive: ViewpointArchive
          Semaphores:
          - null
          - null
          Folders:
          - Order: true
            Jobs:
              SubApplication: SubApplication
              Privilege: Privilege
              Application: Application
            Run: true
            Library: Library
            Privilege: Privilege
            ControlmServer: ControlmServer
            Folder: Folder
          - Order: true
            Jobs:
              SubApplication: SubApplication
              Privilege: Privilege
              Application: Application
            Run: true
            Library: Library
            Privilege: Privilege
            ControlmServer: ControlmServer
            Folder: Folder
          WorkloadPolicies:
          - Privilege: Privilege
            Name: Name
          - Privilege: Privilege
            Name: Name
        Description: Description
        Authentication:
          ExternalProvider:
            LdapUserAndDomain: LdapUserAndDomain
          ControlM:
            PasswordExpirationDays: 0
            ChangePasswordAtNextLogin: true
            Password: Password
            LockAccount: true
        FullName: FullName
        Roles:
        - Roles
        - Roles
        Name: Name
    UserGroupPropertiesData:
      type: object
      properties:
        name:
          type: string
          description: user group name REQUIRED
        externalUsers:
          type: array
          description: external users HIDDEN
          items:
            type: string
        ldapGroups:
          type: array
          description: ldap groups HIDDEN
          items:
            type: string
      example:
        name: name
        externalUsers:
        - externalUsers
        - externalUsers
        ldapGroups:
        - ldapGroups
        - ldapGroups
    UserGroupDetailsData:
      type: object
      properties:
        externalUsers:
          type: array
          description: external users HIDDEN
          items:
            type: string
        ldapGroups:
          type: array
          description: ldap groups HIDDEN
          items:
            type: string
    GatewayData:
      type: object
      properties:
        host:
          type: string
          description: gateway host name REQUIRED
        port:
          type: string
          description: gateway port REQUIRED
        status:
          type: string
          description: gateway status HIDDEN
        message:
          type: string
          description: general message HIDDEN
      example:
        port: port
        host: host
        message: message
        status: status
    ComponentMftKeyType:
      type: object
      properties:
        type:
          type: string
          description: type
        name:
          type: string
          description: name
        host:
          type: string
          description: host
        nodeId:
          type: string
          description: node id
        applType:
          type: string
          description: application type
        applVer:
          type: string
          description: application version
        cmVer:
          type: string
          description: cm version
    ComponentKeyWithStatusType:
      type: object
      properties:
        componentKey:
          $ref: '#/components/schemas/ComponentMftKeyType'
        status:
          type: integer
          description: Component status
    UserHeader:
      type: object
      properties:
        name:
          type: string
          description: user name
        fullName:
          type: string
          description: full user name
        description:
          type: string
          description: user description
        status:
          type: string
          description: user status (output only)
        lastUpdated:
          type: string
          description: updated date (output only)
        created:
          type: string
          description: create date (output only)
        memberOf:
          type: array
          description: list of groups user belongs to
          items:
            type: string
      example:
        lastUpdated: lastUpdated
        created: created
        name: name
        fullName: fullName
        description: description
        memberOf:
        - memberOf
        - memberOf
        status: status
    UserPassword:
      type: object
      properties:
        newPassword:
          type: string
          description: new user password
          x-prompt: New password VALIDATE
    Value:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The parameter value
    ViewpointManagerPrivilegeCategory:
      type: object
      properties:
        Collections:
          type: string
          description: "Collections access level (None, Browse, Update, Full)"
        Hierarchies:
          type: string
          description: "Hierarchies access level (None, Browse, Update, Full)"
        Filters:
          type: string
          description: "Filters access level (None, Browse, Update, Full)"
        Viewpoints:
          type: string
          description: "Viewpoints access level (None, Browse, Update, Full)"
      example:
        Filters: Filters
        Hierarchies: Hierarchies
        Collections: Collections
        Viewpoints: Viewpoints
    FoldersUsersSettingsAndMetadataPropertiesFromB2B:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/FolderProperties'
        settings:
          type: array
          items:
            $ref: '#/components/schemas/SettingProperties'
        settingsMetadata:
          $ref: '#/components/schemas/SettingsMetadataProperties'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserAllowedFoldersProperties'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupsAllowedFoldersProperties'
    FoldersUsersSettingsAndMetadataProperties:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/FolderPropertiesData'
        settings:
          type: array
          items:
            $ref: '#/components/schemas/SettingProperties'
        settingsMetadata:
          $ref: '#/components/schemas/SettingsMetadataProperties'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserAllowedFoldersProperties'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupsAllowedFoldersProperties'
    SettingProperties:
      type: object
      properties:
        category:
          type: string
          description: setting category property HIDDEN
        name:
          type: string
          description: setting name property HIDDEN
        value:
          type: string
          description: setting value property HIDDEN
    SettingPropertiesObject:
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/SettingProperties'
    SettingsMetadataProperties:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentMetaDataProperties'
        error:
          type: string
        selectedComponentAfterActivation:
          type: string
        selectedComponentBeforeActivation:
          type: string
    ComponentMetaDataProperties:
      type: object
      properties:
        displayName:
          type: string
        displayNameID:
          type: string
        name:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/SectionMetadataProperties'
    SectionMetadataProperties:
      type: object
      properties:
        displayName:
          type: string
        displayName1:
          type: string
        displayNameID:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldMetadataProperties'
        name:
          type: string
    FieldMetadataProperties:
      type: object
      properties:
        controlType:
          type: string
        dataType:
          type: string
        displayName:
          type: string
        displayNameID:
          type: string
        falseValue:
          type: string
        hashedPassword:
          type: boolean
        hideIf:
          $ref: '#/components/schemas/ConditionProperties'
        key:
          $ref: '#/components/schemas/SettingKeyProperties'
        name:
          type: string
        needRestart:
          type: boolean
        needRestartMessage:
          type: string
        needRestartMessageID:
          type: string
        placeholder:
          type: string
        placeholderID:
          type: string
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/PossibleValueProperties'
        profiles:
          type: array
          items:
            type: string
        settingChangedEventTypes:
          type: array
          items:
            type: string
        showIf:
          $ref: '#/components/schemas/ConditionProperties'
        tooltip:
          type: string
        tooltipID:
          type: string
        trueValue:
          type: string
        unitsLabel:
          type: string
        unitsLabelID:
          type: string
        validations:
          $ref: '#/components/schemas/ValidationProperties'
    ConditionProperties:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/SettingKeyProperties'
        operator:
          type: string
        value:
          type: string
    SettingKeyProperties:
      type: object
      properties:
        settingCategory:
          type: string
        settingName:
          type: string
    PossibleValueProperties:
      type: object
      properties:
        label:
          type: string
        labelID:
          type: string
        value:
          type: string
    ValidationProperties:
      type: object
      properties:
        max:
          type: integer
          format: int32
        min:
          type: integer
          format: int32
        regexPattern:
          type: string
        regexPatternJava:
          type: string
        regexPatternJavaScript:
          type: string
        regexPatternNoMatchMessage:
          type: string
        regexPatternNoMatchMessageID:
          type: string
        required:
          type: boolean
        requiredIf:
          $ref: '#/components/schemas/ConditionProperties'
    UserAllowedFoldersProperties:
      type: object
      properties:
        allowedFoldersNames:
          type: array
          items:
            type: string
        as2CertificateAlias:
          type: string
        as2Id:
          type: string
        as2PublicKeyCertificate:
          type: string
        as2TargetFolder:
          type: string
        company:
          type: string
        description:
          type: string
        email:
          type: string
        fullName:
          type: string
        hashedPassword:
          type: string
        isLdapAuth:
          type: integer
        name:
          type: string
        phoneNumber:
          type: string
        sshPublicKey:
          type: string
        isLocked:
          type: boolean
        lockReason:
          type: string
        changePasswordAtNextLogin:
          type: boolean
        passwordNeverExpires:
          type: boolean
        lastSuccessfulLoginTime:
          type: string
    GroupsAllowedFoldersProperties:
      type: object
      properties:
        allowedFoldersNames:
          type: array
          items:
            type: string
        externalUsers:
          type: array
          description: external users
          items:
            type: string
        ldapGroups:
          type: array
          description: ldap groups
          items:
            type: string
        name:
          type: string
    FolderProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder. REQUIRED:addMFTFolder | HIDDEN
        allowedInternalUserNames:
          type: array
          description: Authorized Internal Users. HIDDEN
          items:
            type: string
        allowedUserNames:
          type: array
          description: Authorized External Users And User Groups. HIDDEN
          items:
            type: string
        allowedGroupNames:
          type: array
          description: Array of allowed group names. HIDDEN
          items:
            type: string
        deleteFilesAfterProcessing:
          type: boolean
          description: Delete file after downloaded from incoming folder. HIDDEN
        notifyByEmailWhenFileArrived:
          type: boolean
          description: Send email notification to external users when a new file arrives.
            HIDDEN
        retentionHours:
          type: integer
          description: Retention Time in hours. HIDDEN
          format: int64
        sizeLimit:
          type: integer
          description: Size limit for folder (in Gigabyte). HIDDEN
          format: int64
        allowedFilePattern:
          type: string
          description: allowed file pattern wildcard. HIDDEN
        excludeFilePattern:
          type: string
          description: blocked file pattern wildcard. HIDDEN
        accessType:
          type: string
          description: "Folder's access type (Limited, Unlimited). HIDDEN"
    SettingsUpdateObject:
      type: object
      properties:
        SettingsObj:
          $ref: '#/components/schemas/SettingPropertiesObject'
        CompKeyType:
          $ref: '#/components/schemas/ComponentMftKeyType'
    RuleProjection:
      type: object
      properties:
        description:
          type: string
        lastUpdatedTimestamp:
          type: integer
          format: int64
        name:
          type: string
        priority:
          type: integer
          format: int32
        searchTags:
          type: array
          items:
            $ref: '#/components/schemas/SearchTagTuple'
        status:
          type: string
    SearchTagTuple:
      type: object
      properties:
        key:
          type: string
        values:
          type: array
          items:
            type: string
    HubData:
      type: object
      properties:
        status:
          type: string
          description: Hub state
        syncStatus:
          type: string
          description: Hub sync status
        name:
          type: string
          description: Agent name
        cpu:
          type: string
          description: CPU
        memory:
          type: string
          description: memory usage
        message:
          type: string
          description: Hub Health Message
    ZooKeeper:
      type: object
      properties:
        zookeeperId:
          type: integer
          description: zookeeper Id
        zookeeperServerHost:
          type: string
          description: zookeeper Server Host
        zookeeperAdminServerPort:
          type: integer
          description: zookeeper Admin Server Port
        zookeeperClientPort:
          type: integer
          description: zookeeper Client Port
        zookeeperLeaderPort:
          type: integer
          description: zookeeper Leader Port
        zookeeperLeaderElectionPort:
          type: integer
          description: zookeeper Leader Election Port
    AgentCertificateExpirationData:
      type: object
      properties:
        expirationDate:
          type: string
          description: The Certificate expiration date
      example:
        expirationDate: expirationDate
    UserPreferences:
      type: object
      properties:
        userPreferences:
          type: array
          items:
            $ref: '#/components/schemas/CTMNameValueSW'
    CTMNameValueSW:
      type: object
      properties:
        cTMAttrName:
          type: string
        cTMAttrValue:
          type: string
    CertificateSigningRequestData:
      type: object
      properties:
        organization:
          type: string
          description: The organization HIDDEN
        organizationUnit:
          type: string
          description: The organizationUnit HIDDEN
        cityLocality:
          type: string
          description: The cityLocality HIDDEN
        stateProvince:
          type: string
          description: The stateProvince HIDDEN
        country:
          type: string
          description: The country HIDDEN
        emailAddress:
          type: string
          description: The emailAddress HIDDEN
    HubStatus:
      type: object
      properties:
        status:
          type: string
          description: Hub status
    EMSystemParameter:
      type: object
      properties:
        value:
          type: string
          description: EM System parameter
    SystemSetting:
      type: object
      properties:
        saml2IdentityProvider:
          $ref: '#/components/schemas/Saml2IdentityProvider'
        newDayTime:
          $ref: '#/components/schemas/SystemSettingProperty'
        firstDayOfTheWeek:
          $ref: '#/components/schemas/SystemSettingProperty'
        environmentBannerColor:
          $ref: '#/components/schemas/SystemSettingProperty'
        environmentTitle:
          $ref: '#/components/schemas/SystemSettingProperty'
        environmentDescription:
          $ref: '#/components/schemas/SystemSettingProperty'
        enforceSiteStandards:
          $ref: '#/components/schemas/SystemSettingProperty'
        strictnesslevel:
          $ref: '#/components/schemas/SystemSettingProperty'
        historyRetentionDays:
          $ref: '#/components/schemas/SystemSettingProperty'
        annotations:
          $ref: '#/components/schemas/SystemSettingAnnotationProperty'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorData'
    Saml2IdentityProvider:
      required:
      - enabled
      - metadataUrl
      type: object
      properties:
        metadataUrl:
          type: string
        enabled:
          type: boolean
        serviceProviderInformation:
          $ref: '#/components/schemas/ServiceProviderInformation'
    ServiceProviderInformation:
      type: object
      properties:
        singleSignOnUrl:
          type: string
        entityID:
          type: string
        signingCertificate:
          type: string
    ClusterAuthorizationData:
      type: object
      properties:
        hostList:
          type: array
          description: hostnames and ports list HIDDEN
          items:
            $ref: '#/components/schemas/HostnamePortPair'
    HostnamePortPair:
      type: object
      properties:
        physicalHostname:
          type: string
          description: host name
        port:
          type: string
          description: port
    FtsSettingsData:
      type: object
      properties:
        generalSettings:
          $ref: '#/components/schemas/FtsGeneralSettings'
        ftpSettings:
          $ref: '#/components/schemas/FtsFtpSettings'
        sftpSettings:
          $ref: '#/components/schemas/FtsSftpSettings'
        authenticationDetails:
          $ref: '#/components/schemas/FtsAuthenticationDetails'
      description: File Transfer Server (FTS) configuration data
      example:
        ftpSettings:
          passivePorts: passivePorts
          port: 2
          authenticationMethod: authenticationMethod
          keystoreFilePath: keystoreFilePath
          ciphers: ciphers
          keystoreFilePassword: keystoreFilePassword
          secured: true
          serverEnabled: true
          listenForImplicitConnection: true
        sftpSettings:
          port: 7
          authenticationMethod: authenticationMethod
          keystoreFilePath: keystoreFilePath
          overriddenUsersHomeDirectories:
          - homeDirectory: homeDirectory
            userName: userName
          - homeDirectory: homeDirectory
            userName: userName
          ciphers: ciphers
          keystoreFilePassword: keystoreFilePassword
          knownUsersFilePath: knownUsersFilePath
          serverEnabled: true
        generalSettings:
          homeDirectory: homeDirectory
          multipleLoginAllowed: true
          delayAfterLoginFailure: 1
          maxOpenSessions: 0
          throttlingActivated: true
          maxSimultaneousUploads: 5
          maxLoginFailures: 6
          maxSimultaneousDownloads: 5
        authenticationDetails:
          pamAuthenticationDetails:
            serviceName: serviceName
          ldapAuthenticationDetails:
            dnAttributeName: dnAttributeName
            usernameAttributeName: usernameAttributeName
            serverUrl: serverUrl
            searchUserPassword: searchUserPassword
            baseDn: baseDn
            searchUserName: searchUserName
            connectionTimeout: 9
    FtsGeneralSettings:
      type: object
      properties:
        homeDirectory:
          type: string
          description: "Root path where transferred files are stored. If you want\
            \ to use a different directory for each logged in user, you must add /${userName}\
            \ to the path."
        multipleLoginAllowed:
          type: boolean
          description: Allow multiple open sessions
        maxOpenSessions:
          type: integer
          description: Maximum concurrent open sessions
          format: int32
        maxLoginFailures:
          type: integer
          description: Number of retries before the server closes the connection
          format: int32
        delayAfterLoginFailure:
          type: integer
          description: Time of waiting before letting the user to do another login
            in seconds
          format: int32
        throttlingActivated:
          type: boolean
          description: Allow bandwidth throttling
        maxSimultaneousUploads:
          type: integer
          description: Maximum simultaneos uploads
          format: int32
        maxSimultaneousDownloads:
          type: integer
          description: Maximum simultaneos downloads
          format: int32
      description: File Transfer Server general parameters
      example:
        homeDirectory: homeDirectory
        multipleLoginAllowed: true
        delayAfterLoginFailure: 1
        maxOpenSessions: 0
        throttlingActivated: true
        maxSimultaneousUploads: 5
        maxLoginFailures: 6
        maxSimultaneousDownloads: 5
    FtsFtpSettings:
      type: object
      properties:
        serverEnabled:
          type: boolean
          description: Enable/Disable listening for FTP/S connection
        port:
          type: integer
          description: FTP server port
          format: int32
        authenticationMethod:
          type: string
          description: Authentication method being used to connect FTP server
        secured:
          type: boolean
          description: Use FTP secure connection (SSL/TLS)
        keystoreFilePath:
          type: string
          description: FTPS keystore file location
        keystoreFilePassword:
          type: string
          description: Password being used to access the FTPS keystore
        ciphers:
          type: string
          description: Ftps server allowed cipher suites (comma-separated). Leave
            empty to allow all supported cipher suites.
        listenForImplicitConnection:
          type: boolean
          description: Implicit negotiation mode - requires that the entire FTP session
            must be encrypted
        passivePorts:
          type: string
          description: "Passive FTP ports range - for PASV connections, the server\
            \ will open a random port in this range for client to connect to"
      description: FTP/FTPS server parameters
      example:
        passivePorts: passivePorts
        port: 2
        authenticationMethod: authenticationMethod
        keystoreFilePath: keystoreFilePath
        ciphers: ciphers
        keystoreFilePassword: keystoreFilePassword
        secured: true
        serverEnabled: true
        listenForImplicitConnection: true
    FtsSftpSettings:
      type: object
      properties:
        serverEnabled:
          type: boolean
          description: Enable/Disable listening for SFTP connection
        port:
          type: integer
          description: SFTP server port
          format: int32
        authenticationMethod:
          type: string
          description: Authentication method being used to connect FTP server
        keystoreFilePath:
          type: string
          description: SFTP keystore file location
        keystoreFilePassword:
          type: string
          description: Password being used to access the SFTP keystore
        ciphers:
          type: string
          description: Ftps server allowed cipher suites (comma-separated). Leave
            empty to allow all supported cipher suites.
        knownUsersFilePath:
          type: string
          description: Known users file location
        overriddenUsersHomeDirectories:
          type: array
          description: Overridden home directories for specific internal users
          items:
            $ref: '#/components/schemas/FtsUserHomeDirectoryData'
      description: SFTP server parameters
      example:
        port: 7
        authenticationMethod: authenticationMethod
        keystoreFilePath: keystoreFilePath
        overriddenUsersHomeDirectories:
        - homeDirectory: homeDirectory
          userName: userName
        - homeDirectory: homeDirectory
          userName: userName
        ciphers: ciphers
        keystoreFilePassword: keystoreFilePassword
        knownUsersFilePath: knownUsersFilePath
        serverEnabled: true
    FtsUserHomeDirectoryData:
      type: object
      properties:
        userName:
          type: string
          description: User name
        homeDirectory:
          type: string
          description: Home directory
      description: Home directory for specific user
      example:
        homeDirectory: homeDirectory
        userName: userName
    FtsAuthenticationDetails:
      type: object
      properties:
        ldapAuthenticationDetails:
          $ref: '#/components/schemas/FtsLdapAuthenticationDetails'
        pamAuthenticationDetails:
          $ref: '#/components/schemas/FtsPamAuthenticationDetails'
      description: File Transfer Server authentication parameters
      example:
        pamAuthenticationDetails:
          serviceName: serviceName
        ldapAuthenticationDetails:
          dnAttributeName: dnAttributeName
          usernameAttributeName: usernameAttributeName
          serverUrl: serverUrl
          searchUserPassword: searchUserPassword
          baseDn: baseDn
          searchUserName: searchUserName
          connectionTimeout: 9
    FtsPamAuthenticationDetails:
      type: object
      properties:
        serviceName:
          type: string
          description: Name of PAM service
      description: File Transfer Server PAM authentication parameters
      example:
        serviceName: serviceName
    FtsLdapAuthenticationDetails:
      type: object
      properties:
        searchUserName:
          type: string
          description: Name of the user that runs the search action for users that
            log on
        searchUserPassword:
          type: string
          description: Password of the user that runs the search action for users
            that log on
        serverUrl:
          type: string
          description: URL of the LDAP Directory server
        baseDn:
          type: string
          description: Base DN (the point from where the server will search for users)
        usernameAttributeName:
          type: string
          description: Name of the LDAP attribute containing the username
        dnAttributeName:
          type: string
          description: Name of the LDAP attribute containing the distinguished name
        connectionTimeout:
          type: integer
          description: LDAP server connection timeout in milliseconds
          format: int32
      description: File Transfer Server LDAP authentication parameters
      example:
        dnAttributeName: dnAttributeName
        usernameAttributeName: usernameAttributeName
        serverUrl: serverUrl
        searchUserPassword: searchUserPassword
        baseDn: baseDn
        searchUserName: searchUserName
        connectionTimeout: 9
    AgentThingProperties:
      type: object
      properties:
        name:
          type: string
          description: the logical name to be used for new agent (equivilant to NodeId)
        physicalName:
          type: string
          description: the physical name of the thing the agent is installed on
        tag:
          type: string
          description: the agent tag to be associated with the new agent (CMS RBA
            permissions tag that is)
      description: the properties of the new Control-M Agent installed thing to be
        connected to SaaS Control-M
    KnownHosts:
      type: object
      properties:
        hosts:
          type: array
          items:
            type: string
        clusters:
          type: array
          items:
            type: string
    ReadOnlyStatus:
      type: object
      properties:
        mode:
          type: boolean
          description: The status of readOnly
    CtmagentBasicInfoType:
      type: object
      properties:
        serverToAgentPortNumber:
          type: integer
          description: server to agent port number
        agentToServerPortNumber:
          type: integer
          description: agent to server port number
        persistentConnection:
          type: string
          description: is Server-Agent connection transient or perssistent
        tcpsslServerMode:
          type: string
          description: is connection TCP or SSL
        protocolVersion:
          type: string
          description: communication protocol version of the Server-Agent
        agentStatus:
          type: string
          description: the Agent's status message
        ipAddressesList:
          type: array
          items:
            type: string
    CtmagentCtmTestType:
      type: object
      properties:
        title:
          type: string
          description: the test title
        result:
          type: string
          description: the test result
        message:
          type: string
          description: the test message
        userAction:
          type: string
          description: the action user initiated
        command:
          type: string
          description: the test's command
        commandOutput:
          type: string
          description: the command's output
        advanced:
          type: integer
          description: the test advanced option
        ordinal:
          type: integer
          description: the test oridnal
    CtmagentStateChangedType:
      type: object
      properties:
        timestamp:
          type: string
          description: the Agent state change timestamp
        status:
          type: string
          description: the Agent state change status
        message:
          type: string
          description: the Agent state change message
        ordinal:
          type: integer
          description: the state change ordinal
    WorkflowInsightsStatus:
      type: object
      properties:
        Topology:
          type: array
          items:
            $ref: '#/components/schemas/Topology'
        SystemParameters:
          type: array
          items:
            $ref: '#/components/schemas/SystemParameter'
    SystemParameter:
      type: object
      properties:
        name:
          type: string
          description: System parameter name
        value:
          type: string
          description: System parameter value
        type:
          type: string
          description: System parameter type
        description:
          type: string
          description: System parameter description
    Topology:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
    Cluster:
      type: object
      properties:
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        Availability:
          type: array
          items:
            $ref: '#/components/schemas/Availability'
        Performance:
          type: array
          items:
            $ref: '#/components/schemas/Performance'
    Node:
      type: object
      properties:
        Name:
          type: string
          description: Node Name
        Id:
          type: string
          description: A unique id of the node
        Availability:
          type: array
          items:
            $ref: '#/components/schemas/Availability'
        Performance:
          type: array
          items:
            $ref: '#/components/schemas/Performance'
    Availability:
      type: object
      properties:
        Type:
          type: string
          description: the type of the availability stat
        Name:
          type: string
          description: the name of the stat
        Status:
          type: string
          description: the current status
        Message:
          type: string
          description: A message representing the problem
    Performance:
      type: object
      properties:
        Type:
          type: string
          description: the type of the availability metric
        Name:
          type: string
          description: the name of the metric
        Unit:
          type: string
          description: the unit of measurement
        Value:
          type: integer
          description: the value of the metric
    CommunicationAnalysisResponseType:
      type: object
      properties:
        basicInfo:
          $ref: '#/components/schemas/CtmagentBasicInfoType'
        ctmagentCtmTestsType:
          type: array
          description: The list of 4 tests executed and their output
          items:
            $ref: '#/components/schemas/CtmagentCtmTestType'
        ctmagentStatesChangedType:
          type: array
          description: The list of 10 latest Agent's state changed to Unavailable
            and timestamp
          items:
            $ref: '#/components/schemas/CtmagentStateChangedType'
    TokenList:
      required:
      - tokens
      type: object
      properties:
        tokens:
          $ref: '#/components/schemas/TokenListArray'
    TokenListArray:
      type: array
      items:
        $ref: '#/components/schemas/TokenDataResponse'
      x-schema-name: TokenListArray
    TokenDataRequest:
      required:
      - tokenName
      type: object
      properties:
        tokenName:
          type: string
          description: required field. HIDDEN.
        roles:
          type: array
          description: required field when creates token for User. HIDDEN.
          items:
            type: string
        expirationDate:
          type: string
          description: optional field. HIDDEN.
        tokenType:
          type: string
          description: optional field. HIDDEN.
    TokenDataResponse:
      required:
      - tokenName
      - tokenType
      - tokenValue
      type: object
      properties:
        tokenName:
          type: string
          description: required field. HIDDEN.
        tokenType:
          type: string
          description: required field. HIDDEN.
        tokenValue:
          type: string
          description: required field. HIDDEN.
          format: password
        user:
          type: string
          description: is not provided in API Token for Agent. HIDDEN.
        roles:
          type: array
          description: is not provided in API Token for Agent. HIDDEN.
          items:
            type: string
        expirationDate:
          type: string
          description: optional field. HIDDEN.
        createdDate:
          type: string
          description: transient field. HIDDEN.
        lastUpdatedDate:
          type: string
          description: transient field. HIDDEN.
    WorkspaceFolders:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceFolder'
      description: Object containing Folders for workspace
    WorkspaceFolder:
      type: object
      properties:
        folderData:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        jobsData:
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
    AuthenticateCredentials:
      type: object
      properties:
        username:
          type: string
        msg:
          type: string
        sessiontoken:
          type: string
        groups:
          type: array
          items:
            type: string
        additionalAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticateCredentials_additionalAttributes'
    Variables:
      type: object
      properties:
        variables:
          type: array
          description: Key value map where key is pool variables in format %%\\PoolName\AUTOVarInPool.
            HIDDEN.
          items:
            type: object
            additionalProperties:
              type: string
    VariableNames:
      type: object
      properties:
        variables:
          type: array
          description: Array of pool variables in format %%\\PoolName\AUTOVarInPool.
            HIDDEN.
          items:
            type: string
    ApiThrowable:
      title: ApiThrowable
      type: object
      properties:
        localized_message:
          type: string
        message:
          type: string
    CtmvarDelResultItem:
      title: CtmvarDelResultItem
      type: object
      properties:
        del_pool_variables_error_info:
          $ref: '#/components/schemas/PoolVariablesErrorInfo'
    CtmvarDelResults:
      title: CtmvarDelResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/CtmvarDelResultItem'
        to:
          type: integer
          format: int64
    CtmvarErrorInfo:
      title: CtmvarErrorInfo
      type: object
      properties:
        ctmvar_del_error_code:
          type: string
          enum:
          - FailedDeletingFromDB
          - PoolNameInvalid
          - UnKnownDelError
          - UNRECOGNIZED
        ctmvar_get_error_code:
          type: string
          enum:
          - FailedReadingFromDB
          - PoolNameExpressionInvalid
          - VarExpressionInvalidGet
          - UnKnownGetError
          - UNRECOGNIZED
        ctmvar_set_error_code:
          type: string
          enum:
          - NoError
          - VarNameTooLong
          - VarNameInvalid
          - VarExpressionTooLong
          - VarExpressionInvalidSet
          - VarNameIsReserved
          - FailedWritingToDB
          - UnKnownSetError
          - UNRECOGNIZED
        variable_name:
          type: string
    CtmvarGetResultItem:
      title: CtmvarGetResultItem
      type: object
      properties:
        get_pool_variables_error_info:
          $ref: '#/components/schemas/PoolVariablesErrorInfo'
        pool_variables_name_value:
          $ref: '#/components/schemas/PoolVariablesNameValue'
    CtmvarGetResults:
      title: CtmvarGetResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/CtmvarGetResultItem'
        to:
          type: integer
          format: int64
    CtmvarResultItem:
      title: CtmvarResultItem
      type: object
      properties:
        full_line:
          type: string
        type:
          type: string
        variable_name:
          type: string
        variable_value:
          type: string
    CtmvarResults:
      title: CtmvarResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/CtmvarResultItem'
        to:
          type: integer
          format: int64
    CtmvarSetResultItem:
      title: CtmvarSetResultItem
      type: object
      properties:
        set_pool_variables_error_info:
          $ref: '#/components/schemas/PoolVariablesErrorInfo'
    CtmvarSetResults:
      title: CtmvarSetResults
      type: object
      properties:
        completed_status:
          $ref: '#/components/schemas/ResultsStatus'
        error:
          $ref: '#/components/schemas/ApiThrowable'
        from:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/CtmvarSetResultItem'
        to:
          type: integer
          format: int64
    PoolVariablesErrorInfo:
      title: PoolVariablesErrorInfo
      type: object
      properties:
        ctmvar_error_info:
          type: array
          items:
            $ref: '#/components/schemas/CtmvarErrorInfo'
        pool_name:
          type: string
    PoolVariablesName:
      title: PoolVariablesName
      type: object
      properties:
        pool_name:
          type: string
        variable_name:
          type: array
          items:
            type: string
    PoolVariablesNameValue:
      title: PoolVariablesNameValue
      type: object
      properties:
        pool_name:
          type: string
        variable_name_value:
          type: array
          items:
            $ref: '#/components/schemas/VariableNameValue'
    ResultsStatus:
      title: ResultsStatus
      type: object
      properties:
        display_usage:
          type: boolean
        message:
          type: string
        messages:
          type: array
          items:
            type: string
        return_code:
          type: integer
          format: int32
    VariableNameValue:
      title: VariableNameValue
      type: object
      properties:
        variable_name:
          type: string
        variable_value:
          type: string
    body:
      required:
      - definitionsFile
      properties:
        definitionsFile:
          type: string
          description: "A file that contains definitions to be deployed to the server.\
            \ Can be either a JSON definition file, an XML definition file, or a zip\
            \ file that contains multiple JSON or XML definition files."
          format: binary
        deployDescriptorFile:
          type: string
          description: Deploy Descriptor JSON file.
          format: binary
        additionalConfiguration:
          type: string
          description: additionalConfiguration to enable skip testing for local connection
            profile
          format: binary
          x-hidden: true
    body_1:
      required:
      - definitionsFile
      properties:
        definitionsFile:
          type: string
          description: A file that contains definitions of the connection profile
            to be tested
          format: binary
    body_2:
      required:
      - definitionsFile
      properties:
        definitionsFile:
          type: string
          description: "A file that contains definitions to be compiled. Can be either\
            \ a JSON definition file, or a zip file that contains multiple JSON definition\
            \ files."
          format: binary
        deployDescriptorFile:
          type: string
          description: Deploy Descriptor JSON file.
          format: binary
    body_3:
      required:
      - definitionsFile
      properties:
        definitionsFile:
          type: string
          description: A .ctmai file that contains definitions of jobtype to be deployed
            to the server.
          format: binary
        payloadFile:
          type: string
          description: A JSON file that contains specifications of an agent.
          format: binary
          x-hidden: true
    body_4:
      required:
      - definitionsFile
      - deployDescriptorFile
      properties:
        definitionsFile:
          type: string
          description: "A file that contains definitions to be deployed to the server.\
            \ Can be either a JSON definition file, an XML definition file, or a zip\
            \ file that contains multiple JSON or XML definition files."
          format: binary
        deployDescriptorFile:
          type: string
          description: Deploy Descriptor JSON file.
          format: binary
    body_5:
      required:
      - jobDefinitionsFile
      properties:
        jobDefinitionsFile:
          type: string
          description: "File that contains the definitions of the jobs to run. It\
            \ can be a JSON file, or a zip file that can contain one or more JSON\
            \ files, as well as account(s) information."
          format: binary
        deployDescriptorFile:
          type: string
          description: Deploy Descriptor JSON file.
          format: binary
        additionalConfiguration:
          type: string
          description: additionalConfiguration to enable skip testing for local connection
            profile
          format: binary
          x-hidden: true
    body_6:
      required:
      - jobDefinitionsFile
      properties:
        jobDefinitionsFile:
          type: string
          description: File that contains the definitions of the job to modify. It
            should be a JSON file.
          format: binary
    body_7:
      required:
      - roleFile
      properties:
        roleFile:
          type: string
          description: File with contenet of Role Data.
          format: binary
    body_8:
      required:
      - roleFile
      properties:
        roleFile:
          type: string
          description: File with contenet of Role Data.
          format: binary
    body_9:
      required:
      - userFile
      properties:
        userFile:
          type: string
          description: File with contenet of user data.
          format: binary
    body_10:
      required:
      - userFile
      properties:
        userFile:
          type: string
          description: File with contenet of user data.
          format: binary
    body_11:
      required:
      - caChainFile
      - crtFile
      properties:
        crtFile:
          type: string
          description: The CRT file path.
          format: binary
        caChainFile:
          type: string
          description: The CA Chain file path.
          format: binary
    AuthenticateCredentials_additionalAttributes:
      type: object
      properties:
        attrname:
          type: string
        attrvalue:
          type: string
  securitySchemes:
    Bearer:
      type: apiKey
      description: "Token should be received using /login request, and then passed\
        \ in the Authenticate header with all requests."
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
